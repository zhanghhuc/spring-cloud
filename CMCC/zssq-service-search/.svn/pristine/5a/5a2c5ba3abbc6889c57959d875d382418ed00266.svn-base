package com.zssq.search.service.impl;

import com.zssq.search.entity.SearchBean;
import com.zssq.search.service.SolrQueryService;
import com.zssq.solr.basic.SolrQueryBean;
import com.zssq.solr.page.Page;
import com.zssq.solr.po.SensitivewordPo;
import com.zssq.solr.service.CloudSolrQueryHandler;
import com.zssq.solr.service.CloudSolrSensitivewordsHandler;
import org.apache.solr.client.solrj.response.TermsResponse;
import org.apache.solr.common.SolrDocumentList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Service
public class SolrQueryServiceImpl implements SolrQueryService {

	@Autowired
	private CloudSolrQueryHandler solrQueryHandler ;
	@Autowired
	private CloudSolrSensitivewordsHandler solrSensitivewordsHandler ;
	
	protected static final Logger LOGGER = LoggerFactory.getLogger(SolrQueryServiceImpl.class);

	@Override
	public List<TermsResponse.Term> frequencyStatistics(SolrQueryBean solrQueryBean, String coreName) {
		return solrQueryHandler.frequencyStatistics(solrQueryBean, coreName);
	}

	@Override
	public List<String> spellCheck(SolrQueryBean solrQueryBean, String coreName) {
//		return solrQueryHandler.spellCheck(solrQueryBean, coreName);
		return solrQueryHandler.spellCheck(solrQueryBean, coreName);
	}

	/**
	 * 根据query参数查询所有匹配的索引
	 *
	 * @param query
	 */
	@Override
	public SolrDocumentList query(String query, String coreName){
		return  solrQueryHandler.query(query, coreName);
	}
	

	/**
	 *
	 * function: 查询所有匹配的索引
	 *
	 * @param
	 * @author
	 * @createDate 2017-01-24 16:43:28
	 */
	@Override
	public SolrDocumentList queryAll(SearchBean searchBean, String coreName) {
		return  solrQueryHandler.queryAll(searchBean, coreName);
	}
	
	/**
	 *
	 * function: 分页查询索引 -PO类型自动转换
	 *
	 * @param
	 * @author
	 * @createDate 2017-01-24 16:43:28
	 */
	@Override
	public <T> Page<T> queryPageBean(SearchBean searchBean, int pageNum, int pageSize, Class<T> clzz, String coreName) {
		return  solrQueryHandler.queryPageBean(searchBean, pageNum, pageSize, clzz, coreName);
	}
	
	/**
	 * 分页查询 根据关键字查询 [测试通过 - -PO类型自动转换, 使用 solr内部转换机制]
	 * @param <T>
	 * @param coreName
	 *            solr库名称
	 * @param keyword
	 *            搜索关键字
	 * @param pageNum
	 *            当前页码
	 * @param pageSize
	 *            每页显示的大小
	 * @param clzz
	 *            对象类型
	 * @return
	 */
	@Override
	public <T> Page<T> queryBean(String keyword, int pageNum, int pageSize, Class<T> clzz, String hlFile, String coreName) {
		return  solrQueryHandler.queryBean(keyword, pageNum, pageSize, clzz,hlFile, coreName);
	}

	/**
	 * 分页查询 根据关键字查询 [测试通过 - -PO类型自动转换, 使用 solr内部转换机制]
	 * 
	 * @param <T>
	 * @param coreName
	 *            solr库名称
	 * @param keyword
	 *            搜索关键字
	 * @param pageNum
	 *            当前页码
	 * @param pageSize
	 *            每页显示的大小
	 * @param clzz
	 *            对象类型
	 * @return
	 */
	@Override
	public <T> Page<T> queryBinderBean(String keyword, String condition , int pageNum, int pageSize, Class<T> clzz, String coreName) {
		return  solrQueryHandler.queryBinderBean(keyword,condition, pageNum, pageSize, clzz, coreName);
	}

	@Override
	public List<String> getAnalysis(String sentence, String coreName) {
		return solrSensitivewordsHandler.getAnalysis(sentence,coreName);
	}


	@Override
	public Set<String>  checkSensitiveWords(String sentence, String coreName) {
		Set<String> sensitivewords = new HashSet<>() ;
		String sliceSentence = "";
		List<SensitivewordPo> list= new ArrayList<>() ;
		int length = sentence.length();
		int nextLength = 0 ;
		boolean endFflag = false ;
		for (int index = 0; index < length; ) {
            if(length<index+200){
                nextLength=length;
				endFflag = true ;
            }else {
                nextLength = index+200 ;
            }
			sliceSentence = sentence.substring(index,nextLength)  ;
			list = solrSensitivewordsHandler.checkSensitiveWords(sliceSentence, coreName) ;
			if(null !=list && list.size()>0){
				for (SensitivewordPo sensitivewordPo : list){
					sensitivewords.add(sensitivewordPo.getSensitivewords()) ;
				}
			}
			if(endFflag){
				index = index +200 ;

			}else{
				index = nextLength - 10;
			}
		}
		return sensitivewords;
	}

}

package com.zssq.service.impl;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.zssq.constants.ActivityConstants;
import com.zssq.constants.VoteConstants;
import com.zssq.dao.mapper.ActivityCommentMapper;
import com.zssq.dao.mapper.ActivityCommentReplyMapper;
import com.zssq.dao.mapper.ActivityJoinMapper;
import com.zssq.dao.mapper.ActivityPrizeMapper;
import com.zssq.dao.mapper.ActivityWinningRecordMapper;
import com.zssq.dao.pojo.ActivityComment;
import com.zssq.dao.pojo.ActivityCommentReply;
import com.zssq.dao.pojo.ActivityInfo;
import com.zssq.dao.pojo.ActivityJoin;
import com.zssq.dao.pojo.ActivityJoinExample;
import com.zssq.dao.pojo.ActivityPrize;
import com.zssq.dao.pojo.ActivityPrizeExample;
import com.zssq.dao.pojo.ActivityWinningRecord;
import com.zssq.dao.pojo.ActivityWinningRecordExample;
import com.zssq.exceptions.BusinessException;
import com.zssq.service.CommonService;
import com.zssq.service.IActivityModelThreeService;
import com.zssq.shiro.mysecurity.UUIDHelper;
import com.zssq.utils.DateUtils;
import com.zssq.utils.PageInfo;

@Service("activityModelThreeServiceImpl")
public class ActivityModelThreeServiceImpl extends CommonService implements IActivityModelThreeService {
	
	private Logger log = Logger.getLogger(this.getClass());
	
	@Autowired
	private ActivityJoinMapper activityJoinMapper;
	
	@Autowired
	private ActivityWinningRecordMapper activityWinningRecordMapper;
	
	@Autowired
	private ActivityPrizeMapper activityPrizeMapper;
	
	@Autowired
	private ActivityCommentMapper activityCommentMapper;
	
	@Autowired
	private ActivityCommentReplyMapper activityCommentReplyMapper;
	

	@Override
	public void updateIsWinning(ActivityJoin activityJoin) throws BusinessException {
		
		try{
			ActivityJoinExample example = new ActivityJoinExample();
			ActivityJoinExample.Criteria criteria = example.createCriteria();
			//查询条件
			criteria.andActivityCodeEqualTo(activityJoin.getActivityCode());
			criteria.andCodeEqualTo(activityJoin.getCode());
			criteria.andTenantCodeEqualTo(activityJoin.getTenantCode());
			//更新实体
			if(ActivityConstants.NO.equals(activityJoin.getIsWinning())){
				activityJoin.setScore(BigDecimal.valueOf(0));
			}
			activityJoin.setModifyTime(DateUtils.getFormatDateLong());
			Integer count = activityJoinMapper.updateByExampleSelective(activityJoin, example);
			//如果是撤销评奖 则删除表中数据
			if(count > 0){
				if(ActivityConstants.NO.equals(activityJoin.getIsWinning())){
					Map<String,Object> paramMap = new HashMap<String,Object>();
					paramMap.put("activityCode", activityJoin.getActivityCode());
					paramMap.put("joinCode", activityJoin.getCode());
					paramMap.put("tenantCode", activityJoin.getTenantCode());
					activityWinningRecordMapper.delWinningRecord(paramMap);
				}
			}
				
		}catch(Exception e){
			log.error("ActivityModelThreeServiceImpl.updateIsWinning", e);
			throw BusinessException.build("COMMON_400");
		}
	}


	@Override
	public List<ActivityPrize> getPrizeList(ActivityPrize activityPrize) throws BusinessException {
		try {
			ActivityPrizeExample example = new ActivityPrizeExample();
			ActivityPrizeExample.Criteria criteria = example.createCriteria();
			// 查询条件
			criteria.andActivityCodeEqualTo(activityPrize.getActivityCode());
			criteria.andTenantCodeEqualTo(activityPrize.getTenantCode());
			criteria.andIsDeleteEqualTo(ActivityConstants.NO);
			criteria.andIsDisableEqualTo(ActivityConstants.NO);
			// 是否为参与奖查询条件
			if (activityPrize.getIsJoinPrize() != null) {
				criteria.andIsJoinPrizeEqualTo(activityPrize.getIsJoinPrize());
			}
			
			example.setOrderByClause("sequence_no asc");
			
			return activityPrizeMapper.selectByExample(example);
		} catch (Exception e) {
			log.error("ActivityModelThreeServiceImpl.getPrizeList", e);
			throw BusinessException.build("COMMON_400");
		}
	}


	@Override
	public void addPrizeForWorks(ActivityWinningRecord activityWinningRecord) throws BusinessException {

		try{
			/** 1、 根据prizeCode查询 prizeName */
			ActivityPrizeExample example = new ActivityPrizeExample();
			ActivityPrizeExample.Criteria criteria = example.createCriteria();
			//查询条件
			criteria.andActivityCodeEqualTo(activityWinningRecord.getActivityCode());
			criteria.andTenantCodeEqualTo(activityWinningRecord.getTenantCode());
			criteria.andIsDeleteEqualTo(ActivityConstants.NO);
			criteria.andIsDisableEqualTo(ActivityConstants.NO);
			List<ActivityPrize> prizeList = activityPrizeMapper.selectByExample(example);
			String prizeName = null;
			if(prizeList.size() > 0){
				prizeName = prizeList.get(0).getPrizeName();
			}
			
			if(null != prizeName){
				String code = UUIDHelper.getUUID();
				Long time = DateUtils.getFormatDateLong();
				activityWinningRecord.setCode(code);
				activityWinningRecord.setPrizeName(prizeName);
				activityWinningRecord.setCreateTime(time);
				activityWinningRecord.setModifyTime(time);
				//不是参与奖
				activityWinningRecord.setIsJoinPrize(ActivityConstants.NO);
				//插入数据
				/** 2、 根据prizeCode查询 prizeName */
				activityWinningRecordMapper.insertSelective(activityWinningRecord);
			}else{
				throw BusinessException.build("ACTIVITY_23002","该奖项名");
			}
		}catch(BusinessException e){
			throw e;
		}catch(Exception e){
			log.error("ActivityModelThreeServiceImpl.addPrizeForWorks", e); 
			throw BusinessException.build("COMMON_400");
		}
	}
	

	@Override
	public PageInfo getActivityCommentFixedList(ActivityComment activityComment) throws BusinessException {
		
		PageInfo pageInfo = new PageInfo();
		try{
			/** 1、查询活动 是否能被评论 */
			ActivityInfo activityInfo = getActivityInfoByCode(activityComment.getActivityCode(), activityComment.getTenantCode());
			if(null != activityInfo){
				Byte isEnableComment = activityInfo.getEnableComment();
				if(isEnableComment.equals(VoteConstants.NO)){
					// 该活动不允许评论
					throw BusinessException.build("ACTIVITY_23007"); 
				}
				/** 2、查询总评论数 */
				pageInfo.setTotalItem(activityInfo.getCommentNum());
				/** 3、查询列表集合 */
				Map<String,Object> paramMap = new HashMap<>();
				paramMap.put("activityCode", activityComment.getActivityCode());
				paramMap.put("code", activityComment.getCode());
				paramMap.put("infoType", ActivityConstants.INFO_TYPE_2);
				paramMap.put("tenantCode", activityComment.getTenantCode());
				paramMap.put("admirerCode", activityComment.getAdmirerCode());
				paramMap.put("id", activityComment.getId());
				paramMap.put("limitStart", 0);
				paramMap.put("limitEnd", activityComment.getPageSize());
				List<ActivityComment> commentList = activityCommentMapper.getCommentListForLocation(paramMap);
				pageInfo.setList(commentList);
			}else{
				// 活动信息不存在
				throw BusinessException.build("ACTIVITY_23002", "活动信息");
			}
			return pageInfo;
		} catch(BusinessException e) {
			throw e;
		} catch (Exception e) {
			log.error("ActivityModelThreeServiceImpl.getActivityCommentFixedList", e);
			throw BusinessException.build("COMMON_400");
		}
	}


	@Override
	public PageInfo getActivityeReplyFixedList(ActivityCommentReply activityCommentReply) throws BusinessException {
		PageInfo pageInfo = new PageInfo();
		int surplusCount = 0;
		try{
			Map<String,Object> paramMap = new HashMap<>();
			paramMap.put("voteInfoCode", activityCommentReply.getActivityCode());
			paramMap.put("commentCode", activityCommentReply.getCommentCode());
			paramMap.put("code", activityCommentReply.getCode());
			paramMap.put("infoType", ActivityConstants.INFO_TYPE_3);
			paramMap.put("tenantCode", activityCommentReply.getTenantCode());
			paramMap.put("admirerCode", activityCommentReply.getAdmirerCode());
			paramMap.put("id", activityCommentReply.getId());
			paramMap.put("limitStart", 0);
			paramMap.put("limitEnd", Integer.valueOf(activityCommentReply.getPageSize()));
			/** 1、查询评论回复列表 */
			List<ActivityCommentReply> commentList = activityCommentReplyMapper.getCommentReplyListForLocation(paramMap);
			if(commentList.size() > 0){
				paramMap.put("id", commentList.get(commentList.size() - 1).getId());
				/** 2、查询评论回复 剩余记录数 */
				surplusCount = activityCommentReplyMapper.getCommentReplySurplusCountForLocation(paramMap);
			}
			pageInfo.setList(commentList);
			pageInfo.setTotalItem(surplusCount);
			return pageInfo;
		}catch(Exception e){
			log.error("ActivityModelThreeServiceImpl.getActivityeReplyFixedList", e);
			throw BusinessException.build("COMMON_400");
		}
	}


	@Override
	public void updateAwardStatusWithBatch(String tenantCode, String activityCode, List<String> joinCodes)
			throws BusinessException {
		try {
			ActivityWinningRecordExample example = new ActivityWinningRecordExample();
			ActivityWinningRecordExample.Criteria criteria = example.createCriteria();
			
			criteria.andTenantCodeEqualTo(tenantCode);
			criteria.andIsDisableEqualTo(ActivityConstants.NO);
			criteria.andIsDeleteEqualTo(ActivityConstants.NO);
			criteria.andActivityCodeEqualTo(activityCode);
			criteria.andAwardStatusEqualTo(ActivityConstants.NO);// 奖品是否发放：0-否；1-是
			criteria.andActivityJoinCodeIn(joinCodes);
			criteria.andIsJoinPrizeEqualTo(ActivityConstants.NO);// 是否为参与奖   0:否(默认) 1:是
			
			ActivityWinningRecord record = new ActivityWinningRecord();
			record.setAwardStatus(ActivityConstants.YES);
			record.setModifyTime(DateUtils.getFormatDateLong());
			
			int batchCnt = activityWinningRecordMapper.updateByExampleSelective(record, example);
			if (batchCnt != joinCodes.size()) {
				// 有部分获奖作品已发放奖励，请重新选择
				throw BusinessException.build("ACTIVITY_23008");
			}
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			log.error("ActivityModelThreeServiceImpl.updateAwardStatusWithBatch", e);
			throw BusinessException.build("COMMON_400");
		}
	}


	@Override
	public List<ActivityWinningRecord> getWinningRecordList(String tenantCode, String activityCode,
			List<String> joinCodes) throws BusinessException {
		try {
			ActivityWinningRecordExample example = new ActivityWinningRecordExample();
			ActivityWinningRecordExample.Criteria criteria = example.createCriteria();
			
			criteria.andTenantCodeEqualTo(tenantCode);
			criteria.andIsDisableEqualTo(ActivityConstants.NO);
			criteria.andIsDeleteEqualTo(ActivityConstants.NO);
			criteria.andActivityCodeEqualTo(activityCode);
			criteria.andActivityJoinCodeIn(joinCodes);
			
			return activityWinningRecordMapper.selectByExample(example);
		} catch (Exception e) {
			log.error("ActivityModelThreeServiceImpl.getWinningRecordList", e);
			throw BusinessException.build("COMMON_400");
		}
	}

}

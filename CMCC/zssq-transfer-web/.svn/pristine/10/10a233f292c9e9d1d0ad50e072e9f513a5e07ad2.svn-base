package com.zssq.credit.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.zssq.credit.dao.mapper.CoinAccountMapper;
import com.zssq.credit.dao.mapper.CoinAccountMigrateStrictMapper;
import com.zssq.credit.dao.mapper.CreditAccountTeamMapper;
import com.zssq.credit.dao.mapper.GoldTeamStaMapper;
import com.zssq.credit.dao.mapper.IntegralAccountMapper;
import com.zssq.credit.dao.mapper.IntegralAccountMigrateStrictMapper;
import com.zssq.credit.pojo.CoinAccount;
import com.zssq.credit.pojo.CoinAccountMigrateStrict;
import com.zssq.credit.pojo.CreditAccountTeam;
import com.zssq.credit.pojo.IntegralAccount;
import com.zssq.credit.pojo.IntegralAccountMigrateStrict;

@Service("creditTeamTransferService")
public class CreditTeamTransferServiceImpl implements CreditTeamTransferService {

	/** 积分账户映射器 */
	@Autowired
	IntegralAccountMapper integralAccountMapper;

	/** 金币账户映射器 */
	@Autowired
	CoinAccountMapper coinAccountMapper;

	/** 源库班组积分、金币账户映射器 */
	@Autowired
	GoldTeamStaMapper goldTeamStaMapper;

	/** 班组积分、金币账户实体 */
	@Autowired
	CreditAccountTeamMapper creditAccountTeamMapper;

	/** 数据迁移积分账户映射器 */
	@Autowired
	IntegralAccountMigrateStrictMapper integralAccountMigrateStrictMapper;

	/** 数据迁移金币账户映射器 */
	@Autowired
	CoinAccountMigrateStrictMapper coinAccountMigrateStrictMapper;

	@Override
	public void teamAccount() {
		// 导入的偏移量
		int offset = 0;
		// 分批次查询的条数
		int pageSize = 500;
		// 需要导入的总条数
		int totalSize = goldTeamStaMapper.selectPageCount();

		// 严格迁移
		this.teamAccountMigrateStrict(offset, pageSize, totalSize);

		while (offset <= totalSize) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("limitStart", offset);
			map.put("limitEnd", pageSize);
			// 分批次连接查询源库与本地库
			List<CreditAccountTeam> creditAccountTeamList = creditAccountTeamMapper.selectPage(map);

			if (CollectionUtils.isNotEmpty(creditAccountTeamList)) {
				// 分批次导入数据的积分账户集合
				List<IntegralAccount> integralList = new ArrayList<IntegralAccount>();
				// 分批次导入数据的金币账户集合
				List<CoinAccount> coinList = new ArrayList<CoinAccount>();
				// 积分账户
				IntegralAccount integralAccount = null;
				// 金币账户
				CoinAccount coinAccount = null;

				for (CreditAccountTeam teamAccount : creditAccountTeamList) {
					String teamCode = teamAccount.getTeamCode();
					// 如果在本地依赖库中没有查到源库中的team_id，则跳过
					if (StringUtils.isBlank(teamCode)) {
						continue;
					}
					Long createTime = teamAccount.getCreateTime() == null ? null
							: teamAccount.getCreateTime().getTime();
					Long modifyTime = teamAccount.getUpdateTime() == null ? null
							: teamAccount.getUpdateTime().getTime();
					String orgCode = teamAccount.getOrgCode();

					integralAccount = new IntegralAccount();
					integralAccount.setAccountCode(teamCode);
					integralAccount.setAccountType((byte) 2);// 账户类型：1-个人，2-班组
					integralAccount.setCreateTime(createTime);
					integralAccount.setModifyTime(modifyTime);
					integralAccount.setIntegralBalance(
							teamAccount.getPointNum() == null ? 0 : teamAccount.getPointNum().intValue());
					integralAccount.setOrgCode(orgCode);
					integralAccount.setSaasTenantCode("856966d06b96418fab2e430d71a1e84e");
					integralList.add(integralAccount);

					coinAccount = new CoinAccount();
					coinAccount.setAccountCode(teamCode);
					coinAccount.setAccountType((byte) 2);// 账户类型：1-个人，2-班组
					coinAccount.setCoinBalance(
							teamAccount.getGoldCoin() == null ? 0 : teamAccount.getGoldCoin().intValue());
					coinAccount.setCreateTime(createTime);
					coinAccount.setModifyTime(modifyTime);
					coinAccount.setOrgCode(orgCode);
					coinAccount.setSaasTenantCode("856966d06b96418fab2e430d71a1e84e");
					coinList.add(coinAccount);
				}

				// 分批次导入积分账户
				if (CollectionUtils.isNotEmpty(integralList)) {
					integralAccountMapper.batchInsert(integralList);
				}
				// 分批次导入积分账户
				if (CollectionUtils.isNotEmpty(coinList)) {
					coinAccountMapper.batchInsert(coinList);
				}

				// 增加偏移量
				offset += pageSize;
			}
		}

	}

	/**
	 * 
	 * @Title: teamAccountMigrateStrict @Description:
	 *         针对原系统班组积分、金币账户数据的严格迁移 @param @param offset @param @param
	 *         pageSize @param @param totalSize 参数 @return void 返回类型 @throws
	 */
	private void teamAccountMigrateStrict(int offset, int pageSize, int totalSize) {

		while (offset <= totalSize) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("limitStart", offset);
			map.put("limitEnd", pageSize);
			// 分批次连接查询源库与本地库
			List<CreditAccountTeam> creditAccountTeamList = creditAccountTeamMapper.selectPage(map);

			if (CollectionUtils.isNotEmpty(creditAccountTeamList)) {
				// 分批次导入数据的积分账户集合
				List<IntegralAccountMigrateStrict> integralList = new ArrayList<IntegralAccountMigrateStrict>();
				// 分批次导入数据的金币账户集合
				List<CoinAccountMigrateStrict> coinList = new ArrayList<CoinAccountMigrateStrict>();
				// 积分账户
				IntegralAccountMigrateStrict integralAccount = null;
				// 金币账户
				CoinAccountMigrateStrict coinAccount = null;

				for (CreditAccountTeam teamAccount : creditAccountTeamList) {
					String teamCode = teamAccount.getTeamCode() == null ? "team" + teamAccount.getTeamId()
							: teamAccount.getTeamCode();
					Long createTime = teamAccount.getCreateTime() == null ? null
							: teamAccount.getCreateTime().getTime();
					Long modifyTime = teamAccount.getUpdateTime() == null ? null
							: teamAccount.getUpdateTime().getTime();
					String orgCode = teamAccount.getOrgCode();

					integralAccount = new IntegralAccountMigrateStrict();
					integralAccount.setAccountCode(teamCode);
					integralAccount.setAccountType((byte) 2);// 账户类型：1-个人，2-班组
					integralAccount.setCreateTime(createTime);
					integralAccount.setModifyTime(modifyTime);
					integralAccount.setIntegralBalance(
							teamAccount.getPointNum() == null ? 0 : teamAccount.getPointNum().intValue());
					integralAccount.setOrgCode(orgCode);
					integralAccount.setSaasTenantCode("856966d06b96418fab2e430d71a1e84e");
					integralList.add(integralAccount);

					coinAccount = new CoinAccountMigrateStrict();
					coinAccount.setAccountCode(teamCode);
					coinAccount.setAccountType((byte) 2);// 账户类型：1-个人，2-班组
					coinAccount.setCoinBalance(
							teamAccount.getGoldCoin() == null ? 0 : teamAccount.getGoldCoin().intValue());
					coinAccount.setCreateTime(createTime);
					coinAccount.setModifyTime(modifyTime);
					coinAccount.setOrgCode(orgCode);
					coinAccount.setSaasTenantCode("856966d06b96418fab2e430d71a1e84e");
					coinList.add(coinAccount);
				}

				// 分批次导入积分账户
				if (CollectionUtils.isNotEmpty(integralList)) {
					integralAccountMigrateStrictMapper.batchInsert(integralList);
				}
				// 分批次导入积分账户
				if (CollectionUtils.isNotEmpty(coinList)) {
					coinAccountMigrateStrictMapper.batchInsert(coinList);
				}

				// 增加偏移量
				offset += pageSize;
			}
		}
	}

}

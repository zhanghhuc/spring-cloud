package com.zssq.blog.controller;

import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.zssq.blog.service.BlogClassService;
import com.zssq.constants.BlogConstants;
import com.zssq.pojo.ResultJSON;

/**
 * 
 * @ClassName: BlogClassController  
 * @Description: 博客分类数据迁移Controller  
 * @author ZKZ  
 * @date 2017年5月19日  
 *
 */
@Controller
@RequestMapping("blogClassController")
public class BlogClassController {
	
	private Logger log = Logger.getLogger(this.getClass());
	
	@Autowired
	private BlogClassService blogClassService;
	
	@RequestMapping(value = "/transferClassData")  
	@ResponseBody
	public ResultJSON transferClassData() {
		// 返回值
		ResultJSON result = new ResultJSON("COMMON_200");
		JSONObject body = new JSONObject();
		
		try {
			// 开始时间
			long beginTime = System.currentTimeMillis(); 
			log.info("开始时间：" + beginTime);
			
			// 创建临时表
			boolean createFlag = createTempTable();
			if (!createFlag) {
				body.put("message", "新建分类临时表时失败");
				log.error("新建分类临时表时失败");
				throw new Exception();
			}
			log.info("新建分类临时表成功");
			
			// 创建默认分类
			boolean insertDefaultClassFlag = insertDefaultClass();
			if (!insertDefaultClassFlag) {
				body.put("message", "创建默认分类时失败");
				log.error("创建默认分类时失败");
				throw new Exception();
			}
			log.info("创建默认分类成功");
			
			// 导入原数据
			boolean insertSourceClassFlag = insertSourceClass();
			if (!insertSourceClassFlag) {
				body.put("message", "导入原分类时失败");
				log.error("导入原分类时失败");
				throw new Exception();
			}
			log.info("导入原分类成功");
			
			// 结束时间
			long endTime = System.currentTimeMillis(); 
			log.info("结束时间：" + endTime);
			
			// 用时
			long useTime = endTime - beginTime;
			log.info("使用时间：" + useTime);
			
			// 返回值
			body.put("message", "导入成功，共用时:" + useTime);
			result.setBody(body);
		} catch (Exception e) {
			result = new ResultJSON("COMMON_400");
			result.setBody(body);
			e.printStackTrace();
		}
		
		return result;
	}
	
	/**
	 * 
	 * @Title: createTempTable  
	 * @Description: 创建临时表
	 * @return: boolean    返回类型
	 */
	private boolean createTempTable() {
		// 返回值
		boolean result = true;
		
		try {
			// 新建临时表
			blogClassService.createClassTempTable();
		} catch (Exception e) {
			result = false;
			e.printStackTrace();
		}
		
		return result;
	}
	
	/**
	 * 
	 * @Title: insertDefaultClass  
	 * @Description: 创建默认分类
	 * @return: boolean    返回类型
	 */
	private boolean insertDefaultClass() {
		// 返回值
		boolean result = true;
		
		try {
			// 拼接参数
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("remark", BlogConstants.BLOG_CLASS_DEFAULT_FLAG); // 默认分类标识
			paramMap.put("className", BlogConstants.BLOG_CLASS_DEFAULT); // 分类名称
			paramMap.put("createTime", 0L); // 创建时间
			paramMap.put("oldId", 0); // 原id
			paramMap.put("insertTempData", BlogConstants.BLOG_NO); // 是否插入临时表数据
			
			// 插入
			blogClassService.insertDefaultClass(paramMap);
		} catch (Exception e) {
			result = false;
			e.printStackTrace();
		}
		
		return result;
	}
	
	/**
	 * 
	 * @Title: insertSourceClass  
	 * @Description: 导入原数据
	 * @return: boolean    返回类型
	 */
	private boolean insertSourceClass() {
		// 返回值
		boolean result = true;
		
		try {
			// 插入
			blogClassService.insertSourceClass();
		} catch (Exception e) {
			result = false;
			e.printStackTrace();
		}
		
		return result;
	}
	
}

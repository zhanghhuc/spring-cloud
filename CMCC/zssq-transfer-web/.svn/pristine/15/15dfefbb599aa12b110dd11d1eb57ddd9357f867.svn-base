package com.zssq.vote.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.zssq.shiro.mysecurity.UUIDHelper;
import com.zssq.utils.StringTools;
import com.zssq.vote.VoteTrConstants;
import com.zssq.vote.dao.mapper.TransVoteCommentMapper;
import com.zssq.vote.dao.mapper.SysOrgInfoMapper;
import com.zssq.vote.dao.mapper.TransVoteMapper;
import com.zssq.vote.dao.mapper.VoteCommentMapper;
import com.zssq.vote.dao.mapper.VoteCommentReplyMapper;
import com.zssq.vote.dao.mapper.TransVoteOptionsMapper;
import com.zssq.vote.dao.mapper.TransVoteUserMapper;
import com.zssq.vote.dao.mapper.VoteInfoMapper;
import com.zssq.vote.pojo.VoteComment;
import com.zssq.vote.pojo.VoteCommentReply;
import com.zssq.vote.dao.mapper.VoteJoinMapper;
import com.zssq.vote.dao.mapper.VoteOptionsMapper;
import com.zssq.vote.pojo.SysOrgInfo;
import com.zssq.vote.pojo.TransVoteOptions;
import com.zssq.vote.pojo.TransVoteOptionsExample;
import com.zssq.vote.pojo.VoteInfo;
import com.zssq.vote.pojo.VoteJoin;
import com.zssq.vote.pojo.VoteOptions;
import com.zssq.vote.service.ITransferVoteService;

@Service("transferVoteService")
public class TransferVoteServiceImpl implements ITransferVoteService {

	private Logger log = Logger.getLogger(this.getClass());
	
	@Autowired
	private TransVoteMapper transVoteMapper;
	@Autowired
	private TransVoteOptionsMapper transVoteOptionsMapper;
	@Autowired
	private TransVoteUserMapper transVoteUserMapper;
	@Autowired
	private VoteInfoMapper voteInfoMapper;
	@Autowired
	private TransVoteCommentMapper transVoteCommentMapper;
	@Autowired
	private VoteCommentMapper voteCommentMapper;
	@Autowired
	private VoteCommentReplyMapper voteCommentReplyMapper;
	@Autowired
	private VoteOptionsMapper voteOptionsMapper;
	@Autowired
	private VoteJoinMapper voteJoinMapper;
	
	@Autowired
	private SysOrgInfoMapper sysOrgInfoMapper;
	
	public ConcurrentHashMap<Integer, Integer> options = new ConcurrentHashMap<Integer, Integer>();

	//@Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = false, rollbackFor = Exception.class)
	@Override
	public void transfer(boolean pageFlag, int startNum, int endNum) throws Exception {
		try {
			// 组装查询参数
			Map<String, Object> paramMap = new HashMap<String, Object>();
			if (pageFlag) {
				paramMap.put("limitStart", startNum);
				paramMap.put("limitEnd", endNum);
			}

			List<Map<String, Object>> voteList = transVoteMapper.queryOriginalVote(paramMap);
			if (voteList != null && voteList.size() > 0) {
				log.info("**transfer开始**");
				for (Map<String, Object> voteMap : voteList) {
					first(voteMap);
				}
			}

		} catch (Exception e) {
			log.error("*****transferStepOfOne出错*****", e);
			throw e;
		}
	}
	/**
	 * 处理投票主表信息
	 * @Function transferFirst
	 * @Description 
	 * @param voteMap
	 * @throws Exception
	 */
	@Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = false, rollbackFor = Exception.class)
	public void first(Map<String, Object> voteMap) throws Exception {
		try {
			VoteInfo voteInfo = new VoteInfo();
			// 生成投票code
			String voteInfoCode = UUIDHelper.getUUID();
			voteInfo.setCode(voteInfoCode);
			// 租户标识
			String tenantCode = (String) voteMap.get("saasTenantCode");
			if (StringTools.isEmpty(tenantCode)) {
				tenantCode = VoteTrConstants.TENANT_CODE;
			}
			voteInfo.setTenantCode(tenantCode);
			// 组织机构编码
			String orgCode = (String) voteMap.get("manOrgCode");
			if (StringTools.isEmpty(orgCode)) {
				orgCode = VoteTrConstants.NO_DATA;
			}
			voteInfo.setOrgCode(orgCode);
			// 创建时间
			Date cTime = (Date) voteMap.get("createTime");
			long createTime = cTime.getTime();
			voteInfo.setCreateTime(createTime);
			// 修改时间
			Date uTime = (Date) voteMap.get("updateTime");
			long modifyTime = uTime.getTime();
			voteInfo.setModifyTime(modifyTime);
			// 发起人
			String sponsorCode = (String) voteMap.get("userCode");
			if (StringTools.isEmpty(sponsorCode)) {
				sponsorCode = VoteTrConstants.NO_DATA;
			}
			voteInfo.setSponsorCode(sponsorCode);
			// 发起人类型(1-个人  2-班组  3-门户管理员)
			//1-个人投票;2-班组投票;3-地区投票;4-省投票;5-集团投票;
			String voteType = String.valueOf(voteMap.get("voteType")==null?"":voteMap.get("voteType"));
			String sponsorType = voteType;
			if ("3".equals(voteType) || "4".equals(voteType) || "5".equals(voteType)) {
				sponsorType = "3";
			}
			voteInfo.setSponsorType(sponsorType);
			// 发起机构CODE
			String sponsorOrgCode = "";
			if ("2".equals(voteType)) {
				// TODO 传入teamId返回teamCode
				String teamId = String.valueOf(voteMap.get("teamId")==null?"":voteMap.get("teamId"));
				
			} else if ("3".equals(voteType)) {
				String cityId = String.valueOf(voteMap.get("cityId")==null?"":voteMap.get("cityId"));
				SysOrgInfo sysOrgInfo = sysOrgInfoMapper.queryOrgInfoByOrgId(Integer.valueOf(cityId));
				sponsorOrgCode = sysOrgInfo.getManOrgCode();
			} else if ("4".equals(voteType)) {
				String provinceId = String.valueOf(voteMap.get("provinceId")==null?"":voteMap.get("provinceId"));
				SysOrgInfo sysOrgInfo = sysOrgInfoMapper.queryOrgInfoByOrgId(Integer.valueOf(provinceId));
				sponsorOrgCode = sysOrgInfo.getManOrgCode();
			} else if ("5".equals(voteType)) {
				sponsorOrgCode = VoteTrConstants.GROUP_CODE;
			}
			if (StringTools.isNotEmpty(sponsorOrgCode)) {
				voteInfo.setSponsorOrgCode(sponsorOrgCode);
			}
			// 状态:5-结束
			voteInfo.setVoteStatus((byte) 5);
			// 投票主题
			String title = (String) voteMap.get("voteTitle");
			if (StringTools.isEmpty(title)) {
				title = VoteTrConstants.NO_DATA;
			}
			voteInfo.setTitle(title);
			// 说明
			String voteExplain = (String) voteMap.get("voteDeclare");
			if (StringTools.isNotEmpty(voteExplain)) {
				voteInfo.setVoteExplain(voteExplain);
			}
			// 是否可多选
			Integer optionsType = Integer.valueOf(String.valueOf(voteMap.get("optionsType")));
			byte isMultiOption = 0;
			if (optionsType > 1) {
				isMultiOption = 1;
			}
			voteInfo.setIsMultiOption(isMultiOption);
			
			// 是否启用评论
			voteInfo.setIsEnableComment((byte) 1);
			// 开始时间
			Date voteStartTime = (Date) voteMap.get("voteStartTime");
			voteInfo.setStartTime(voteStartTime.getTime());
			// 结束时间
			Date voteEndTime = (Date) voteMap.get("voteEndTime");
			voteInfo.setEndTime(voteEndTime.getTime());
			// 参与记录数
			Integer joinNum = Integer.parseInt(voteMap.get("voteNum")==null?"0":voteMap.get("voteNum").toString());
			voteInfo.setJoinNum(joinNum);
			
			int result = voteInfoMapper.insertSelective(voteInfo);
			if (result > 0) {
				// 投票ID
				Integer voteId = Integer.parseInt(voteMap.get("voteId").toString());
				// 进行第二步
				second(voteId, voteInfoCode, tenantCode, orgCode, createTime, modifyTime);
			}
		} catch (Exception e) {
			throw e;
		}
	}

	// 迁移投票选项数据，用户参与投票数据
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false, rollbackFor = Exception.class)
	public void second(int voteId, String voteInfoCode, String tenantCode, String orgCode, long createTime,
			long modifyTime) throws Exception {
		// 1.查询此投票的所有选项
		TransVoteOptionsExample example = new TransVoteOptionsExample();
		TransVoteOptionsExample.Criteria criteria = example.createCriteria();
		
		criteria.andVoteIdEqualTo(voteId);
		example.setOrderByClause("POSITION asc");
		
		List<TransVoteOptions> optionsList = transVoteOptionsMapper.selectByExample(example);
		for (TransVoteOptions trOptions : optionsList) {
			VoteOptions vo = new VoteOptions();
			vo.setCode(UUIDHelper.getUUID());
			// 租户标识
			vo.setTenantCode(tenantCode);
			// 组织机构code
			vo.setOrgCode(orgCode);
			// 创建时间&修改时间
			vo.setCreateTime(createTime);
			vo.setModifyTime(modifyTime);
			// 投票主表CODE
			vo.setVoteInfoCode(voteInfoCode);
			// 选项序号
			vo.setOrderNumber(trOptions.getPosition());
			// 选项内容
			vo.setContent(trOptions.getOptionsContent());
			// 选择人数
			vo.setSelectedNum(trOptions.getVoteNum());
			
			// 选项id与选项序号集合，现有的设计是存的选项序号
			options.put(trOptions.getOptionsId(), trOptions.getPosition());
			
			voteOptionsMapper.insertSelective(vo);
		}
		
		// 2.查询此投票的所有参与记录
		List<Map<String, Object>> joinList = transVoteUserMapper.queryVoteUserByUnion(voteId);
		if (joinList != null && joinList.size() > 0) {
			VoteJoin vj = new VoteJoin();
			for (int i = 0; i < joinList.size(); i++) {
				Map<String, Object> joinRecord = joinList.get(i);
				
				// 租户标识
				String joinTenantCode = (String) joinRecord.get("saasTenantCode");
				if (StringTools.isEmpty(joinTenantCode)) {
					joinTenantCode = VoteTrConstants.TENANT_CODE;
				}
				// 组织机构编码
				String joinOrgCode = (String) joinRecord.get("manOrgCode");
				if (StringTools.isEmpty(joinOrgCode)) {
					joinOrgCode = VoteTrConstants.NO_DATA;
				}
				// 创建时间(参与时间)&修改时间
				Date cTime = (Date) joinRecord.get("voteDate");
				long joinTime = cTime.getTime();
				// 参与用户CODE
				String joinUserCode = (String) joinRecord.get("userCode");
				if (StringTools.isEmpty(joinUserCode)) {
					joinUserCode = VoteTrConstants.NO_DATA;
				}
				// 选项序号
				Integer voteOptions = Integer.parseInt(joinRecord.get("voteOptions").toString());
				
				String selectedNum = String.valueOf(options.get(voteOptions));
				
				if (i == 0) {
					vj.setCode(UUIDHelper.getUUID());
					vj.setTenantCode(joinTenantCode);
					vj.setOrgCode(joinOrgCode);
					vj.setCreateTime(joinTime);
					vj.setModifyTime(joinTime);
					vj.setJoinUserCode(joinUserCode);
					vj.setVoteInfoCode(voteInfoCode);
					vj.setSelectedNumber(selectedNum);
					
					//continue;
				}
				if (vj.getJoinUserCode().equals(joinUserCode)) {
					vj.setSelectedNumber(new StringBuffer(vj.getSelectedNumber()).append("|") .append(selectedNum).toString());
					/*if (!vj.getSelectedNumber().equals(selectedNum)) {
					}*/
				} else {
					voteJoinMapper.insertSelective(vj);
					
					vj = new VoteJoin();
					vj.setCode(UUIDHelper.getUUID());
					vj.setTenantCode(joinTenantCode);
					vj.setOrgCode(joinOrgCode);
					vj.setCreateTime(joinTime);
					vj.setModifyTime(joinTime);
					vj.setJoinUserCode(joinUserCode);
					vj.setVoteInfoCode(voteInfoCode);
					vj.setSelectedNumber(selectedNum);
				}
				if (i == joinList.size() - 1) {
					voteJoinMapper.insertSelective(vj);
				}
			}
		}
		// 进行第三步
		third(voteId, voteInfoCode);
	}
	
	// 迁移投票评论回复数据
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false, rollbackFor = Exception.class)
	public void third(int voteId, String voteInfoCode) throws Exception {
		try {
			ArrayList<VoteComment> commentList = new ArrayList<>();
			ArrayList<VoteCommentReply> replyList = new ArrayList<>();
			
			//查询投票的评论
			List<Map<String, Object>> cs = transVoteCommentMapper.selectComment(voteId);
			for (Map<String, Object> c : cs) {
				VoteComment comment = new VoteComment();
				//评论code
				String commentCode = UUIDHelper.getUUID();
				comment.setCode(commentCode);
				String tenantCode = (String) c.get("saasTenantCode");
				if(tenantCode == null){	
					comment.setTenantCode("");
				}else{
					comment.setTenantCode(tenantCode);
				}
				
				String manOrgCode = (String) c.get("manOrgCode");
				if(manOrgCode == null){
					comment.setOrgCode("");
				}else{
					comment.setOrgCode(manOrgCode);
				}
				
				Date cDate = (Date)c.get("COMMENT_DATE");
				comment.setCreateTime(cDate.getTime());
				comment.setModifyTime(cDate.getTime());
				comment.setVoteInfoCode(voteInfoCode);
				
				String userCode = (String) c.get("userCode");
				if (userCode == null) {
					comment.setCommenterCode("");
				} else {
					comment.setCommenterCode(userCode);
				}
				
				comment.setContent((String) c.get("COMMENT_CONTENT"));
				
				
				
				int cid =Integer.parseInt((String) c.get("COMMENT_ID"));
				//查询评论的回复
				List<Map<String, Object>> rs = transVoteCommentMapper.selectReply(cid);
				for (Map<String, Object> r : rs) {
					VoteCommentReply reply = new VoteCommentReply();
					//回复code
					String replyCode = UUIDHelper.getUUID();
					reply.setCode(replyCode);
					
					String rTenantCode = (String) r.get("saasTenantCode");
					if (rTenantCode == null) {
						reply.setTenantCode("");
					} else {
						reply.setTenantCode(rTenantCode);
					}
					
					String rManOrgCode = (String) r.get("manOrgCode");
					if (rManOrgCode == null) {
						reply.setOrgCode("");
					} else {
						reply.setOrgCode(rManOrgCode);
					}
					
					Date rDate = (Date)r.get("COMMENT_DATE");
					reply.setCreateTime(rDate.getTime());
					reply.setModifyTime(rDate.getTime());
					reply.setVoteInfoCode(voteInfoCode);
					reply.setCommentCode(commentCode);
					
					String rUserCode = (String) r.get("userCode");
					if (rUserCode == null) {
						reply.setReplierCode("");
					} else {
						reply.setReplierCode(rUserCode);
					}
					String questCode = (String) r.get("questCode");
					if (questCode == null) {
						reply.setQuestionerCode("");
					} else {
						reply.setQuestionerCode(questCode);
					}
					
					reply.setContent((String) r.get("COMMENT_CONTENT"));
					
					replyList.add(reply);
				}
				
				
				//批量插入评论的回复
				if(replyList.size()>0){
					voteCommentReplyMapper.batchInsert(replyList);
					comment.setReplyCount(replyList.size());
					replyList.clear();
				}
				
				commentList.add(comment);
			}
			
			//批量插入评论
			voteCommentMapper.batchInsert(commentList);
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}

}

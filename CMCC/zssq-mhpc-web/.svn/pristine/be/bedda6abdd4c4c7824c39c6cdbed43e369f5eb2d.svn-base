package com.zssq.auth.controller;


import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.zssq.annotation.RequireValid;
import com.zssq.auth.vo.OrgLinkVo;
import com.zssq.auth.vo.OrgTreeVo;
import com.zssq.auth.vo.SrcOrgVo;
import com.zssq.auth.vo.SubOrgVo;
import com.zssq.constants.AuthConstants;
import com.zssq.dao.pojo.OrgLinkList;
import com.zssq.dao.pojo.SysOrgInfo;
import com.zssq.dao.pojo.SysUserInfo;
import com.zssq.exceptions.BusinessException;
import com.zssq.pojo.Message;
import com.zssq.pojo.ResultJSON;
import com.zssq.service.ISysOrgService;
import com.zssq.service.ISysUserService;
import com.zssq.utils.PropertiesUtil;
import com.zssq.utils.StringTools;

/**
 * 提供对"组织机构信息"进行操作的接口，使用SpringMVC映射请求Url
 * 
 * @since  JDK 1.7
 * @author 赵翊
 */
@Controller  
@RequestMapping("/sysOrg")
public class SysOrgController {

	private Logger log = Logger.getLogger(this.getClass());
	
	@Autowired
	private ISysOrgService sysOrgService;

	@Autowired
	private ISysUserService sysUserService;
	

	/**
	 * 获取指定机构的详细信息
	 * 
	 * @param request
	 * 			Http 请求参数，必须参数包含：orgCode
	 * @return 组织机构详细信息
	 * @throws BusinessException
	 */
	@RequestMapping("/info")  
	@ResponseBody
	public ResultJSON getByCode(HttpServletRequest request) throws BusinessException {
		
		Message message = null;
		Map<String, String> resultBody = new HashMap<String, String>();
		try {
			SysOrgInfo sysOrgInfo = sysOrgService.selectByCode(request.getParameter("orgCode"));
			
			if(sysOrgInfo != null) {
				resultBody.put("id", StringTools.formatToString(sysOrgInfo.getId()));
				resultBody.put("orgCode", StringTools.formatToString(sysOrgInfo.getSysOrgCode()));
				resultBody.put("parentCode", StringTools.formatToString(sysOrgInfo.getParentCode()));
				resultBody.put("orgName", StringTools.formatToString(sysOrgInfo.getSysOrgName()));
				resultBody.put("orgFullname", StringTools.formatToString(sysOrgInfo.getSysOrgFullname()));
				resultBody.put("orgType", StringTools.formatToString(sysOrgInfo.getSysOrgType()));
				resultBody.put("orgOrder", StringTools.formatToString(sysOrgInfo.getSysOrgOrder()));
				resultBody.put("isEnable", StringTools.formatToString(sysOrgInfo.getIsEnable()));
				message = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_200);
			} else {
				message = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_10002);
			}
			
			ResultJSON rj = new ResultJSON();
			rj.setReturnCode(message.getCode());
	        rj.setReturnTip(String.format(message.getTip(), "获取指定机构的详细信息"));
	        rj.setBody(resultBody);
			
			return rj;
		} catch (Exception e) {
			log.error("SysOrgController.getByCode 获取指定机构信息出错", e);
			message = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_10002);
			throw new BusinessException(message.getCode(), String.format(message.getTip(), "获取指定机构的详细信息"));
		}
	}
	
	
	/**
	 * 获取指定机构的详细信息（多条）
	 * 
	 * @param request
	 * 			Http 请求参数，必须参数包含：orgCode
	 * @return 组织机构详细信息
	 * @throws BusinessException
	 */
	@ResponseBody
	@RequestMapping("/infos")  
	public ResultJSON getByCodes(HttpServletRequest request) throws BusinessException {
		
		Message m = null;
		try {
			List<String> codeList = Arrays.asList(request.getParameter("orgCodes").split(","));
			List<SysOrgInfo> orgList = sysOrgService.selectByCodes(codeList);
			
			JSONObject body = new JSONObject();
			JSONArray jsonArray = new JSONArray();
			for (int i = 0; i < orgList.size(); i++) {
				JSONObject orgInfo = new JSONObject();
				orgInfo.put("id", StringTools.formatToString(orgList.get(i).getId()));
				orgInfo.put("orgCode", StringTools.formatToString(orgList.get(i).getSysOrgCode()));
				orgInfo.put("parentCode", StringTools.formatToString(orgList.get(i).getParentCode()));
				orgInfo.put("orgName", StringTools.formatToString(orgList.get(i).getSysOrgName()));
				orgInfo.put("orgFullName", StringTools.formatToString(orgList.get(i).getSysOrgFullname()));
				orgInfo.put("orgType", StringTools.formatToString(orgList.get(i).getSysOrgType()));
				orgInfo.put("orgOrder", StringTools.formatToString(orgList.get(i).getSysOrgOrder()));
				orgInfo.put("isEnable", StringTools.formatToString(orgList.get(i).getIsEnable()));
				jsonArray.add(orgInfo);
			}
			body.put("dataList", jsonArray);
			ResultJSON rj = new ResultJSON();
			log.info("SysOrgController.linkList:获取组织级联下拉");
        	m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_200);
			rj.setReturnCode(m.getCode());
	        rj.setReturnTip(String.format(m.getTip(), "获取指定机构的详细信息"));
	        rj.setBody(body);
			
			return rj;
		} catch (Exception e) {
			log.error("SysOrgController.getByCodes 获取指定机构信息出错", e);
			m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_10002);
			throw new BusinessException(m.getCode(), String.format(m.getTip(), "获取多个机构的详细信息"));
		}
	}
	 
	/**
	 * 组织树，根据当前用户所属的行政组织，动态构建根节点及子孙节点
	 * 
	 * @param param
	 * 			封装构建组织树所需的参数，必须参数：userCode
	 * @return 通用返回参数
	 * @throws BusinessException
	 */
	@ResponseBody
	@RequestMapping("/tree")
	public ResultJSON tree(@RequireValid OrgTreeVo param) throws BusinessException{  
        
        Message m = null;
        ResultJSON rj = new ResultJSON();
        try {
        	// 获取用户信息
        	SysUserInfo userInfo = sysUserService.selectByCode(param.getUserCode());        	
        	// 获取用户所属的行政组织，作为根节点
        	SysOrgInfo topOrg = userInfo.getManageOrgInfo();
        	// 获取 parentCode 等于根节点的组织
        	SysOrgInfo record = new SysOrgInfo();
        	record.setParentCode(topOrg.getSysOrgCode());
        	List<SysOrgInfo> orgList = sysOrgService.selectByRecord(record);
        	
        	JSONObject body = new JSONObject();
        	
        	// 封装根节点信息
        	body.put("topOrgCode", StringTools.formatToString(topOrg.getSysOrgCode()));
        	body.put("topOrgName", StringTools.formatToString(topOrg.getSysOrgName()));
        	body.put("topOrgFullName", StringTools.formatToString(topOrg.getSysOrgFullname()));
        	body.put("topOrgType", StringTools.formatToString(topOrg.getSysOrgType()));
        	
        	// 封装根节点的下级节点信息
        	JSONArray jsonArray = new JSONArray();
        	for (int i = 0; i < orgList.size(); i++) {
        		JSONObject orgJson = new JSONObject();
        		orgJson.put("orgCode",StringTools.formatToString(orgList.get(i).getSysOrgCode()));
        		orgJson.put("parentCode",StringTools.formatToString(orgList.get(i).getParentCode()));
        		orgJson.put("orgName",StringTools.formatToString(orgList.get(i).getSysOrgName()));
        		orgJson.put("orgFullName",StringTools.formatToString(orgList.get(i).getSysOrgFullname()));
        		orgJson.put("orgType",StringTools.formatToString(orgList.get(i).getSysOrgType()));
        		jsonArray.add(orgJson);
			}
        	body.put("subOrgList",jsonArray);
        	
            log.info("SysOrgController.tree:获取组织机构树");
        	m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_200);
            rj.setReturnCode(m.getCode());
            rj.setReturnTip(String.format(m.getTip(),"获取组织机构树"));
            rj.setBody(body);
		} catch (Exception e) {
			m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_10002);
			throw new BusinessException(m.getCode(), String.format(m.getTip(),"获取组织机构树"));
		}
        return rj;
	}
		
	/**
	 * 组织树，全量组织，根节点为集团
	 * 
	 * @param param
	 * 			封装构建组织树所需的参数
	 * @return 通用返回参数
	 * @throws BusinessException
	 */
	@ResponseBody
	@RequestMapping("/topTree")
	public ResultJSON topTree() throws BusinessException{  
        
        Message m = null;
        ResultJSON rj = new ResultJSON();
        try {
        	JSONObject body = new JSONObject();
        	
        	// 根节点：集团
        	SysOrgInfo record = new SysOrgInfo();
        	record.setParentCode("0");
        	SysOrgInfo topOrg = sysOrgService.selectByRecord(record).get(0);
        	        	
    		body.put("topOrgCode", StringTools.formatToString(topOrg.getSysOrgCode()));
        	body.put("topOrgName", StringTools.formatToString(topOrg.getSysOrgName()));
        	body.put("topOrgFullName", StringTools.formatToString(topOrg.getSysOrgFullname()));
        	body.put("topOrgType", StringTools.formatToString(topOrg.getSysOrgType()));
        	
        	// 下级节点：parentCode 为集团的组织
        	record.setParentCode(topOrg.getSysOrgCode());
        	List<SysOrgInfo> orgList = sysOrgService.selectByRecord(record);
        	JSONArray jsonArray = new JSONArray();
        	for (int i = 0; i < orgList.size(); i++) {
        		JSONObject orgJson = new JSONObject();
        		orgJson.put("orgCode",StringTools.formatToString(orgList.get(i).getSysOrgCode()));
        		orgJson.put("parentCode",StringTools.formatToString(orgList.get(i).getParentCode()));
        		orgJson.put("orgName",StringTools.formatToString(orgList.get(i).getSysOrgName()));
        		orgJson.put("orgFullName",StringTools.formatToString(orgList.get(i).getSysOrgFullname()));
        		orgJson.put("orgType",StringTools.formatToString(orgList.get(i).getSysOrgType()));
        		jsonArray.add(orgJson);
			}
        	body.put("subOrgList",jsonArray);
        	
            log.info("SysOrgController.topTree:获取顶级组织机构树");
        	m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_200);
            rj.setReturnCode(m.getCode());
            rj.setReturnTip(m.getTip());
            rj.setBody(body);
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			m = PropertiesUtil.getMessage("TEAM_10002");
			throw new BusinessException(m.getCode(), String.format(m.getTip(),"获取顶级组织机构树"));
		}
        return rj;
	}
	
	/**
	 * 组织联动
	 * 
	 * @param param
	 * 			封装请求参数，必须参数：userCode
	 * @return 行政组织信息（三级）
	 * @throws BusinessException
	 */
	@ResponseBody
	@RequestMapping("/linkList")
	public ResultJSON linkList(@RequireValid OrgLinkVo param) throws BusinessException{  
	    Message m = null;
	    ResultJSON rj = new ResultJSON();
	    try {
	    	SysOrgInfo record = new SysOrgInfo();
	    	SysUserInfo userInfo = sysUserService.selectByCode(param.getUserCode());
	    	if(userInfo != null){
	    		String orgCode = userInfo.getManageOrgInfo().getSysOrgCode();//行政orgCode
	    		String orgType = userInfo.getManageOrgInfo().getSysOrgType();//行政org类型
	    		record.setSysOrgCode(orgCode);
	    		record.setSysOrgType(orgType);
	    	}else{
	    		m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_10004);
				throw new BusinessException(m.getCode(), String.format(m.getTip(),"查询集团/省/市级联下拉","用户code无效"));
	    	}
	    	OrgLinkList orgLinkList = sysOrgService.getOrgLinkList(record);
	    	//集团等级
			SysOrgInfo topOrg = orgLinkList.getTopOrg();
			JSONObject body = new JSONObject();
			body.put("topOrgCode", topOrg.getSysOrgCode());
			body.put("topOrgName", topOrg.getSysOrgName());
			body.put("topOrgFullName", topOrg.getSysOrgFullname());
	    	//省
	    	JSONArray proArray = new JSONArray();
			List<SysOrgInfo> proList = orgLinkList.getProList();
	    	for (int i = 0; i < proList.size(); i++) {
	    		JSONObject orgJson = new JSONObject();
	    		orgJson.put("orgCode", StringTools.formatToString(proList.get(i).getSysOrgCode()));
	    		orgJson.put("orgName", StringTools.formatToString(proList.get(i).getSysOrgFullname()));
	    		proArray.add(orgJson);
			}
	    	body.put("proList", proArray);
	    	//市
	    	JSONArray cityArray = new JSONArray();
			List<SysOrgInfo> cityList = orgLinkList.getCityList();
	    	for (int i = 0; i < cityList.size(); i++) {
	    		JSONObject orgJson = new JSONObject();
	    		orgJson.put("orgCode", StringTools.formatToString(cityList.get(i).getSysOrgCode()));
	    		orgJson.put("orgName", StringTools.formatToString(cityList.get(i).getSysOrgFullname()));
	    		cityArray.add(orgJson);
			}
	    	body.put("cityList", cityArray);
	    	m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_200);
	        rj.setReturnCode(m.getCode());
	        rj.setReturnTip(String.format(m.getTip(),"查询集团/省/市级联下拉"));
	        rj.setBody(body);
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_10002);
			throw new BusinessException(m.getCode(), String.format(m.getTip(),"查询集团/省/市级联下拉"));
		}
	    return rj;
	}

	/**
	 * 获取指定组织的下级行政组织
	 * 
	 * @param param
	 * 			封装参数，必须参数：orgCode
	 * @return 通用返回参数
	 * @throws BusinessException
	 */
	@ResponseBody
	@RequestMapping("/subManList")
	public ResultJSON subManList(@RequireValid SubOrgVo param) throws BusinessException{  
        
        Message m = null;
        ResultJSON rj = new ResultJSON();
        try {
        	List<SysOrgInfo> orgList = sysOrgService.selectSubManOrg(param.getOrgCode());
        	
        	JSONArray jsonArray = new JSONArray();
        	JSONObject body = new JSONObject();
        	for (int i = 0; i < orgList.size(); i++) {
        		JSONObject orgJson = new JSONObject();
        		orgJson.put("orgCode",StringTools.formatToString(orgList.get(i).getSysOrgCode()));
        		orgJson.put("parentCode",StringTools.formatToString(orgList.get(i).getParentCode()));
        		orgJson.put("orgName",StringTools.formatToString(orgList.get(i).getSysOrgName()));
        		orgJson.put("orgFullName",StringTools.formatToString(orgList.get(i).getSysOrgFullname()));
        		orgJson.put("orgType",StringTools.formatToString(orgList.get(i).getSysOrgType()));
        		jsonArray.add(orgJson);
			}
        	body.put("dataList",jsonArray);
        	m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_200);
            rj.setReturnCode(m.getCode());
            rj.setReturnTip(String.format(m.getTip(),"获取指定组织的下级行政组织"));
            rj.setBody(body);
		} catch (Exception e) {
			m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_10002);
			throw new BusinessException(m.getCode(), String.format(m.getTip(),"获取指定组织的下级行政组织"));
		}
        return rj;
	}
	
	/**
	 * 获取指定组织的下级节点
	 * 
	 * @param param
	 * 			封装请求参数，必须参数：orgCode
	 * @return 组织信息
	 * @throws BusinessException
	 */
	@ResponseBody
	@RequestMapping("/subList")
	public ResultJSON subList(@RequireValid SubOrgVo param) throws BusinessException{  
        
        Message m = null;
        ResultJSON rj = new ResultJSON();
        try {
        	SysOrgInfo record = new SysOrgInfo();
        	record.setParentCode(param.getOrgCode());
        	List<SysOrgInfo> orgList = sysOrgService.selectByRecord(record);
        	JSONArray jsonArray = new JSONArray();
        	JSONObject body = new JSONObject();
        	for (int i = 0; i < orgList.size(); i++) {
        		JSONObject orgJson = new JSONObject();
        		orgJson.put("orgCode",StringTools.formatToString(orgList.get(i).getSysOrgCode()));
        		orgJson.put("parentCode",StringTools.formatToString(orgList.get(i).getParentCode()));
        		orgJson.put("orgName",StringTools.formatToString(orgList.get(i).getSysOrgName()));
        		orgJson.put("orgFullName",StringTools.formatToString(orgList.get(i).getSysOrgFullname()));
        		orgJson.put("orgType",StringTools.formatToString(orgList.get(i).getSysOrgType()));
        		jsonArray.add(orgJson);
			}
        	body.put("dataList",jsonArray);
        	m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_200);
            rj.setReturnCode(m.getCode());
            rj.setReturnTip(String.format(m.getTip(),"获取指定组织的下级组织"));
            rj.setBody(body);
		} catch (Exception e) {
			m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_10002);
			throw new BusinessException(m.getCode(), String.format(m.getTip(),"获取指定组织的下级组织"));
		}
        return rj;
	}
	
	/**
	 * 级联向上查询行政组织信息
	 * 
	 * @param request
	 * 			Http 请求参数
	 * @return 通用返回对象
	 * @throws BusinessException
	 */
	@ResponseBody
	@RequestMapping("/cascadeUpManOrg") 
	public ResultJSON cascadeUpManOrg(HttpServletRequest request) throws BusinessException{
		
		Message m = null;
		JSONObject body = new JSONObject();
		try {			
			List<SysOrgInfo> manOrgInfos = sysOrgService.selectCascadeUpManOrg(request.getParameter("manOrgCode"));						
			for(SysOrgInfo manOrgInfo : manOrgInfos) {
				body.put(manOrgInfo.getSysOrgType(), manOrgInfo.getSysOrgCode());
			}
			
			ResultJSON rj = new ResultJSON();
        	m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_200);
        	
			rj.setReturnCode(m.getCode());
	        rj.setReturnTip(String.format(m.getTip(), "级联向上查询行政组织信息"));
	        rj.setBody(body);
	        
	        return rj;
		} catch (Exception e) {
			m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_10002);
			throw new BusinessException(m.getCode(), String.format(m.getTip(),"级联向上查询行政组织信息"));
		}
	}
	
	
	/**
	 * 根据原始code查询
	 * 
	 * @param param
	 * 			封装请求参数，必须参数：srcCode
	 * @return 组织信息
	 * @throws BusinessException
	 */
	@ResponseBody
	@RequestMapping("/selectBySrcCode") 
	public ResultJSON selectBySrcCode(@RequireValid SrcOrgVo param) throws BusinessException{
		
		Message m = null;
		JSONObject body = new JSONObject();
		try {			
			SysOrgInfo orgInfo = sysOrgService.selectBySrcCode(param.getSrcCode());						
			
			body.put("isEnable", StringTools.formatToString(orgInfo.getIsEnable()));
			body.put("orgCode", StringTools.formatToString(orgInfo.getManOrgCode()));
			
			ResultJSON rj = new ResultJSON();
        	m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_200);
        	
			rj.setReturnCode(m.getCode());
	        rj.setReturnTip(String.format(m.getTip(), "根据原始code查询"));
	        rj.setBody(body);
	        
	        return rj;
		} catch (Exception e) {
			m = PropertiesUtil.getMessage(AuthConstants.RETURNCODE_AUTH_10002);
			throw new BusinessException(m.getCode(), String.format(m.getTip(),"根据原始code查询"));
		}
	}
	
}

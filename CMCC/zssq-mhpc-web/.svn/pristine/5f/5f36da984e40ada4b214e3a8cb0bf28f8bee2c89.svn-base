package com.zssq.relation.controller;

import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.zssq.annotation.RequireValid;
import com.zssq.constants.CreditConstants;
import com.zssq.constants.RelationConstants;
import com.zssq.dao.pojo.MessageIntegral;
import com.zssq.dao.pojo.SysOrgInfo;
import com.zssq.dao.pojo.SysUserInfo;
import com.zssq.dao.pojo.TeamInfo;
import com.zssq.exceptions.BusinessException;
import com.zssq.kafka.core.KafkaProducerTemplate;
import com.zssq.model.RelationShareModel;
import com.zssq.pojo.ResultJSON;
import com.zssq.relation.vo.DelShareVO;
import com.zssq.relation.vo.GetUserShareListVO;
import com.zssq.service.ISysOrgService;
import com.zssq.service.ISysUserService;
import com.zssq.service.ITeamInfoService;
import com.zssq.service.RelationShareService;
import com.zssq.utils.PageBean;
import com.zssq.utils.PageParam;
import com.zssq.utils.StringTools;
import com.zssq.vo.RelationShareVO;

/**
 * @ClassName RelationShareController
 * @Description 分享管理
 * @author LXW
 * @date 2017年6月12日 上午11:12:34
 * @version 1.0
 * @since JDK 1.7
 */
@Controller
@RequestMapping("relation")
public class RelationShareController {
	
	private Logger log = Logger.getLogger(this.getClass());
	
	@Autowired
	private RelationShareService relationShareService;
	@Autowired
	private ISysUserService iSysUserService;
	@Autowired
	private ITeamInfoService iTeamInfoService;
	@Autowired
	private ISysOrgService iSysOrgService;
	
	@SuppressWarnings("rawtypes")
	@Autowired
	private KafkaProducerTemplate producerTemplate;
	
	/**
	 * 
	 * @Title: getUserShareList  
	 * @Description: 查询个人分享列表
	 * @param getUserShareListVO
	 * @throws BusinessException    参数  
	 * @return: ResultJSON    返回类型
	 */
	@RequestMapping(value="getUserShareList",method=RequestMethod.POST)
	@ResponseBody
	public ResultJSON getUserShareList(@RequireValid GetUserShareListVO getUserShareListVO) throws BusinessException {
		// 返回值
		ResultJSON result = null;
		
		try {
			log.info("RelationShareController.getUserShareList：获取个人分享列表");
			
			// 获取参数
			String pageNo = getUserShareListVO.getPageNo(); // 页码
			String pageSize = getUserShareListVO.getPageSize(); // 每页条数
			String queryTime = getUserShareListVO.getQueryTime(); // 查询时间
			String userCode = getUserShareListVO.getUserCode(); // 人员编号
			
			// 获取分享人员信息
			SysUserInfo shareUserInfo = iSysUserService.selectByCode(userCode);
			if (shareUserInfo == null) {
				log.error("RelationShareController.getUserShareList：获取不到人员信息userCode=" + userCode);
				throw BusinessException.build("COMMON_400");
			}
			
			// 拼接参数
			PageParam pageParam = new PageParam(Integer.valueOf(pageNo), Integer.valueOf(pageSize));
			RelationShareVO relationShareVO =new RelationShareVO();
			relationShareVO.setUserCode(userCode); // 人员编号
			relationShareVO.setQueryTime(Long.valueOf(queryTime)); // 查询时间
			
			// 查询
			PageBean pageBean = relationShareService.getUserShareList(pageParam, relationShareVO);
			if (pageBean == null) {
				log.error("RelationShareController.getUserShareList：查询失败");
				throw BusinessException.build("BLOG_13002", "查询");
			}
			
			// 获取数据
			List<Object> recordList = pageBean.getRecordList();
			JSONArray ja = new JSONArray();
			if (null != recordList && !recordList.isEmpty()) {
				int recordSize = recordList.size();
				for (int i = 0; i < recordSize; i++) {
					RelationShareModel relationShareModel = (RelationShareModel) recordList.get(i);
					JSONObject jo = new JSONObject();
					jo.put("shareCode", StringTools.formatToString(relationShareModel.getShareCode()));//分享编号
					jo.put("dynamicCode", StringTools.formatToString(relationShareModel.getDynamicCode()));//动态编号
					jo.put("shareClass", StringTools.formatToString(relationShareModel.getSubjectClass()));//分享类型
					jo.put("subjectCode", StringTools.formatToString(relationShareModel.getSubjectCode()));//内容编号
					
					//获取人员信息
					SysUserInfo sysUserInfo = iSysUserService.selectByCode(relationShareModel.getUserCode());
					jo.put("subjectUserCode", sysUserInfo == null ? "" : StringTools.formatToString(sysUserInfo.getUserCode()));//内容发布人编号
					jo.put("subjectUserName", sysUserInfo == null ? "" : StringTools.formatToString(sysUserInfo.getUserName()));//内容发布人名称
					jo.put("subjectUserPhotoUrl", sysUserInfo == null ? "" : StringTools.formatToString(sysUserInfo.getHeadPortrait()));//内容发布人头像链接
					jo.put("subjectDepend", StringTools.formatToString(relationShareModel.getSubjectDepend()));//从属关系
					if(RelationConstants.RELATION_SUBJECT_DEPEND_TEAM.equals(relationShareModel.getSubjectDepend())){
						// 获取班组信息
						TeamInfo teamInfo = iTeamInfoService.selectByCode(relationShareModel.getTeamCode());
						jo.put("subjectTeamCode", teamInfo == null ? "" : StringTools.formatToString(teamInfo.getTeamCode()));//班组编号
						jo.put("subjectTeamName", teamInfo == null ? "" : StringTools.formatToString(teamInfo.getTeamName()));//班组名称
						// 获取内容所属组织信息
						SysOrgInfo sysOrgInfo = iSysOrgService.selectByCode(teamInfo == null ? "" : teamInfo.getOrgCode());
						jo.put("subjectOrgCode", sysOrgInfo == null ? "" : StringTools.formatToString(sysOrgInfo.getSysOrgCode()));
						jo.put("subjectOrgName", sysOrgInfo == null ? "" : StringTools.formatToString(sysOrgInfo.getSysOrgFullname()));
					}else{
						jo.put("subjectTeamCode", "");//班组编号
						jo.put("subjectTeamName", "");//班组名称
						jo.put("subjectOrgCode", sysUserInfo == null ? "" : StringTools.formatToString(sysUserInfo.getManageOrgInfo().getSysOrgCode()));//内容所属组织编号
						jo.put("subjectOrgName", sysUserInfo == null ? "" : StringTools.formatToString(sysUserInfo.getManageOrgInfo().getSysOrgFullname()));//内容所属组织名称
						
					}

					jo.put("subjectSource", StringTools.formatToString(relationShareModel.getSubjectSource()));//内容来源
					jo.put("subjectTitle", StringTools.formatToString(relationShareModel.getSubjectTitle()));//内容标题
					jo.put("subjectDigest", StringTools.formatToString(relationShareModel.getSubjectDigest()));//内容摘要
					ja.add(jo);
				}
			}
			
			// 返回值赋值
			result = new ResultJSON("COMMON_200");
			JSONObject body = new JSONObject();
			body.put("userCode", StringTools.formatToString(shareUserInfo.getUserCode()));
			body.put("userName", StringTools.formatToString(shareUserInfo.getUserName()));
			body.put("userPhotoUrl", StringTools.formatToString(shareUserInfo.getHeadPortrait()));
			body.put("orgCode", StringTools.formatToString(shareUserInfo.getManageOrgInfo().getSysOrgCode()));
			body.put("orgName", StringTools.formatToString(shareUserInfo.getManageOrgInfo().getSysOrgFullname()));
			
			body.put("total", pageBean.getTotalCount());
			body.put("shareList", ja);
			result.setBody(body);
			
			log.info("RelationShareController.getUserShareList：获取个人分享列表成功");
		} catch (Exception e) {
			log.error("RelationShareController.getUserShareList", e);
			throw BusinessException.build("COMMON_400");
		}
		return result;
		
	}
	
	/**
	 * 
	 * @Title: delShare  
	 * @Description: 取消分享
	 * @param delShareVO
	 * @throws BusinessException    参数  
	 * @return: ResultJSON    返回类型
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value="delShare",method=RequestMethod.POST)
	@ResponseBody
	public ResultJSON delShare(@RequireValid DelShareVO delShareVO) throws BusinessException {
		// 返回值
		ResultJSON result = null;
		
		try {
			log.info("RelationShareController.delShare：取消分享");
			
			// 获取参数
			String dynamicCode = delShareVO.getDynamicCode(); // 动态编号
			String shareCode = delShareVO.getShareCode(); // 分享编号
			String userCode = delShareVO.getUserCode(); // 人员编号
			
			// 查询个人信息
			SysUserInfo sysUserInfo = iSysUserService.selectByCode(userCode);
			if (sysUserInfo == null) {
				log.error("RelationShareController.delShare：获取不到人员信息userCode=" + userCode);
				throw BusinessException.build("COMMON_400");
			}
			
			// 拼接参数
			RelationShareVO relationShareVO = new RelationShareVO();
			relationShareVO.setShareCode(shareCode); // 分享编号
			relationShareVO.setUserCode(userCode); // 人员编号
			relationShareVO.setDynamicCode(dynamicCode); // 动态编号
			relationShareVO.setModifyTime(new Date().getTime()); // 修改时间
			
			// 删除
			boolean deleteFlag = relationShareService.deleteShare(relationShareVO);
			if (!deleteFlag) {
				log.error("RelationShareController.delShare：取消分享失败");
				throw BusinessException.build("RELATION_19002", "取消分享");
			}

			//消息队列减积分
			MessageIntegral MessageIntegral = new MessageIntegral();
			MessageIntegral.setAccountCode(userCode);
			MessageIntegral.setAccountType(CreditConstants.TYPE_INDIVIDUAL);
			MessageIntegral.setActionCode(CreditConstants.COMMAND_CONTENT_SHAREDEL);
			MessageIntegral.setManageOrgCode(sysUserInfo.getManageOrgInfo().getSysOrgCode());
			producerTemplate.send(CreditConstants.CREDIT_INCREMENT, JSONObject.toJSONString(MessageIntegral));
			
			// 返回值赋值
			result = new ResultJSON("COMMON_200");
			JSONObject body = new JSONObject();
			result.setBody(body);
			
			log.info("RelationShareController.delShare：取消分享成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			log.error("RelationShareController.delShare", e);
			throw BusinessException.build("COMMON_400");
		}
		
		return result;
	}
}

package com.zssq.news.controller;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.zssq.news.model.*;
import com.zssq.news.service.*;
import com.zssq.annotation.RequireValid;
import com.zssq.constants.NewsConstants;
import com.zssq.constants.NewsReplyConstants;
import com.zssq.dao.pojo.*;
import com.zssq.exceptions.BusinessException;
import com.zssq.dao.pojo.RelationDynamic;
import com.zssq.dao.pojo.RelationSubjectInfo;
import com.zssq.dao.pojo.SysOrgInfo;
import com.zssq.dao.pojo.SysUserInfo;
import com.zssq.kafka.core.KafkaProducerTemplate;
import com.zssq.news.dao.pojo.NewsInfoComment;
import com.zssq.news.dao.pojo.NewsInfoContent;
import com.zssq.news.dao.pojo.NewsReply;
import com.zssq.news.model.*;
import com.zssq.news.newsvo.*;
import com.zssq.news.service.*;
import com.zssq.pojo.ResultJSON;
import com.zssq.service.ISysOrgService;
import com.zssq.service.ISysUserService;
import com.zssq.service.RelationThirdDynamicService;
import com.zssq.shiro.mysecurity.UUIDHelper;
import com.zssq.utils.PageBean;
import com.zssq.vo.RelationDataVO;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.*;

import static com.zssq.constants.NewsConstants.NEWS_STATUS_PUBLISHED;

/**
 * 
 * @ClassName: NewsCommentController
 * @Description: PC端新闻Controller
 * @author SharlaCheung
 * @date 2017年4月13日
 *
 */
@Controller
@RequestMapping("/newspc")
public class NewsController {
	private Logger log = Logger.getLogger(this.getClass());
	
	@Autowired
	private NewsInfoContentService newsInfoContentService;
	@Autowired
	private NewsCommentService newsCommentService;
	@Autowired
	private NewsReplyService newsReplyService;
	@Autowired
	private NewsInfoInformService newsInfoInformService;
	@Autowired
	private NewsCollectService newsCollectService;
	@Autowired
	private ISysUserService sysUserService;
	@Autowired
	private ISysOrgService sysOrgService;
	@Autowired
	private RelationThirdDynamicService relationThirdDynamicService;

	@Autowired
	protected KafkaProducerTemplate producerTeplate;
	/**
	 * 
	 * @Title: getNewsInfos
	 * @Description: 新闻查询列表
	 * @param newsInfoListVO
	 * @return    参数  
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException 
	 */
	@RequestMapping("/getNewsInfos")
	@ResponseBody
	public ResultJSON getNewsInfos(@RequireValid NewsInfoListVO newsInfoListVO) throws BusinessException{
		NewsQuery newsQuery=new NewsQuery();
		ResultJSON resJson = null ;
		JSONObject json = null ;
		JSONArray jsonArray=new JSONArray();
		JSONObject body = new JSONObject();
		try {
			newsQuery.setUserCode(newsInfoListVO.getUserCode());
			newsQuery.setPageNo(Integer.valueOf(newsInfoListVO.getPageNo()));
			newsQuery.setPageSize(Integer.valueOf(newsInfoListVO.getPageSize()));
			newsQuery.setLimitStart(newsQuery.getPageNo() * newsQuery.getPageSize());
			newsQuery.setOrgCode(newsInfoListVO.getOrgCode());
			newsQuery.setIsHidden(NewsConstants.NEWS_NO_HIDDEN);//只查询未被隐藏的新闻
			newsQuery.setIsDelete(NewsConstants.NEWS_NO_DELETE);//只查询未被删除的新闻
            newsQuery.setIsShield(NewsConstants.NEWS_NO_SHIELD);
			newsQuery.setInfoStatus(NewsConstants.NEWS_STATUS_PUBLISHED);
			//查询条件
			PageBean pageBean=newsInfoContentService.getNewsInfosPc(newsQuery);
			//返回值封装
			List<NewsInfoContent> list=pageBean.getRecordList();
			//根据用户code列表获取用户集合
			if(list.size()>0){
				List<String> usercodes = new ArrayList<>();
				for (NewsInfoContent newsInfoContent : list) {
					usercodes.add(newsInfoContent.getInfoOperatorCode());
				}
				List<SysUserInfo> userInfos = sysUserService.selectByCodes(usercodes);
				Map<String, SysUserInfo> userMap = generateUserInfoMap(userInfos);
				for(int i=0;i<list.size();i++){
					json=new JSONObject();
					NewsInfoContent temp=list.get(i);
					json.put("newsCode", temp.getNewsCode());
					json.put("infoTitle",temp.getInfoTitle());
					json.put("infoContentText",temp.getInfoContentText());
					json.put("infoContentHtml",temp.getInfoContentHtml());
					json.put("fileUrl",temp.getFileUrl());
					json.put("infoStatus", temp.getInfoStatus());
					json.put("infoOperatorCode", temp.getInfoOperatorCode());
					SysUserInfo userInfo = userMap.get(temp.getInfoOperatorCode());
					json.put("infoOperatorName", userInfo == null ? "" : userInfo.getUserName());
					json.put("orgLevel", temp.getOrgLevel());
					json.put("orgCode", temp.getOrgCode());
					json.put("isTop", temp.getIsTop());
					json.put("infoSort", temp.getInfoSort());
//					json.put("isHidden",temp.getIsHidden());
					json.put("infoGoodCount", temp.getInfoGoodCount()==null?0:temp.getInfoGoodCount());
					json.put("isPraiseGood", temp.getIsPraise());
					json.put("infoCommentCount", temp.getInfoCommentCount()==null?0:temp.getInfoCommentCount());
					json.put("collectNumber", temp.getCollectNumber());
					json.put("isCollect", temp.getIsCollect());
					json.put("transmitNumber", temp.getTransmitNumber());
					json.put("createTime", temp.getCreateTime());
					json.put("modifyTime", temp.getModifyTime());
					json.put("publishTime", temp.getPublishTime());
					jsonArray.add(json) ;
				}
			}
			resJson=new ResultJSON("COMMON_200");
			body.put("totalCount", pageBean.getTotalCount());
			body.put("list", jsonArray);
			resJson.setBody(body);

			log.info("NewsCommentController.page:获取新闻列表成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "获取新闻列表");
		}
		return resJson;
	}

	/**
	 *
	 * @Title: getUserCollectNews
	 * @Description: 我的收藏--新闻列表
	 * @param newsCollectListVO
	 * @return    参数
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException
	 */
	@RequestMapping("/getUserCollectNews")
	@ResponseBody
	public ResultJSON getUserCollectNews(@RequireValid NewsCollectListVO newsCollectListVO) throws BusinessException{
		NewsQuery newsQuery=new NewsQuery();
		ResultJSON resJson = null ;
		JSONObject json = null ;
		JSONArray jsonArray=new JSONArray();
		JSONObject body = new JSONObject();
		try {
			SysUserInfo sysUser = sysUserService.selectByCode(newsCollectListVO.getUserCode());
			newsQuery.setUserCode(newsCollectListVO.getUserCode());
			newsQuery.setPageNo(Integer.valueOf(newsCollectListVO.getPageNo()));
			newsQuery.setPageSize(Integer.valueOf(newsCollectListVO.getPageSize()));
			newsQuery.setLimitStart(newsQuery.getPageNo() * newsQuery.getPageSize());
			newsQuery.setOrgCode(sysUser.getManageOrgInfo().getManOrgCode());
			newsQuery.setIsHidden(NewsConstants.NEWS_NO_HIDDEN);//只查询未被隐藏的新闻
			newsQuery.setIsDelete(NewsConstants.NEWS_NO_DELETE);//只查询未被删除的新闻
            newsQuery.setIsShield(NewsConstants.NEWS_NO_SHIELD);
			//查询条件
			PageBean pageBean=newsInfoContentService.getUserCollectNewsPc(newsQuery);
			//返回值封装
			List<NewsInfoContent> list=pageBean.getRecordList();
			//根据用户code列表获取用户集合
			if(list.size()>0){
				List<String> usercodes = new ArrayList<>();
				for (NewsInfoContent newsInfoContent : list) {
					usercodes.add(newsInfoContent.getInfoOperatorCode());
				}
				List<SysUserInfo> userInfos = sysUserService.selectByCodes(usercodes);
				Map<String, SysUserInfo> userMap = generateUserInfoMap(userInfos);
				for(int i=0;i<list.size();i++){
					json=new JSONObject();
					NewsInfoContent temp=list.get(i);
					json.put("newsCode", temp.getNewsCode());
					json.put("infoTitle",temp.getInfoTitle());
					json.put("infoContentText",temp.getInfoContentText());
					json.put("infoContentHtml",temp.getInfoContentHtml());
					json.put("fileUrl",temp.getFileUrl());
					json.put("infoStatus", temp.getInfoStatus());
					json.put("infoOperatorCode", temp.getInfoOperatorCode());
					SysUserInfo userInfo = userMap.get(temp.getInfoOperatorCode());
					json.put("infoOperatorName", userInfo == null ? "" : userInfo.getUserName());
					json.put("orgLevel", temp.getOrgLevel());
					json.put("orgCode", temp.getOrgCode());
					json.put("isTop", temp.getIsTop());
					json.put("infoSort", temp.getInfoSort());
//					json.put("isHidden",temp.getIsHidden());
					json.put("infoGoodCount", temp.getInfoGoodCount()==null?0:temp.getInfoGoodCount());
					json.put("isPraiseGood", temp.getIsPraise());
					json.put("infoCommentCount", temp.getInfoCommentCount()==null?0:temp.getInfoCommentCount());
					json.put("collectNumber", temp.getCollectNumber());
					json.put("isCollect", temp.getIsCollect());
					json.put("transmitNumber", temp.getTransmitNumber());
					json.put("createTime", temp.getCreateTime());
					json.put("modifyTime", temp.getModifyTime());
					json.put("publishTime", temp.getPublishTime());
					jsonArray.add(json) ;
				}
			}
			resJson=new ResultJSON("COMMON_200");
			body.put("totalCount", pageBean.getTotalCount());
			body.put("list", jsonArray);
			resJson.setBody(body);

			log.info("NewsCommentController.page:获取新闻列表成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "获取新闻列表");
		}
		return resJson;
	}

	/**
	 *
	 * @Title: getNewsInfoDetail
	 * @Description: 新闻明细
	 * @param newsBaseVo
	 * @return    参数
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException
	 */
	@RequestMapping("/getNewsInfoDetail")
	@ResponseBody
	public ResultJSON getNewsInfoDetail(@RequireValid NewsBaseVo newsBaseVo) throws BusinessException{
		NewsQuery newsQuery=new NewsQuery();
		ResultJSON resJson = null ;
		JSONObject json = new JSONObject() ;
		try {
			newsQuery.setIsHidden(NewsConstants.NEWS_NO_HIDDEN);//只查询未被隐藏的新闻
			newsQuery.setIsDelete(NewsConstants.NEWS_NO_DELETE);//只查询未被删除的新闻
			newsQuery.setIsShield(NewsConstants.NEWS_NO_SHIELD);
//			newsQuery.setOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
			newsQuery.setNewsCode(newsBaseVo.getNewsCode());
			newsQuery.setUserCode(newsBaseVo.getUserCode());
			//查询条件
			NewsInfoContent newsInfoContent=newsInfoContentService.getNewsInfoDetailPC(newsQuery);
			//返回值封装
			if(null != newsInfoContent){
					SysUserInfo sysUser = sysUserService.selectByCode(newsInfoContent.getInfoOperatorCode());
					json.put("newsCode", newsInfoContent.getNewsCode());
					json.put("infoTitle",newsInfoContent.getInfoTitle());
					json.put("infoContentText",newsInfoContent.getInfoContentText());
					json.put("infoContentHtml",newsInfoContent.getInfoContentHtml());
					json.put("fileUrl",newsInfoContent.getFileUrl());
					json.put("infoStatus", newsInfoContent.getInfoStatus());
					json.put("infoOperatorCode", newsInfoContent.getInfoOperatorCode());
					json.put("infoOperatorName", sysUser==null?"":sysUser.getUserName());
					json.put("infoCreatorCode", newsInfoContent.getInfoCreatorCode());
					json.put("orgLevel", newsInfoContent.getOrgLevel());
					json.put("orgCode", newsInfoContent.getOrgCode());
					json.put("isTop", newsInfoContent.getIsTop());
					json.put("infoSort", newsInfoContent.getInfoSort());
					json.put("infoGoodCount", newsInfoContent.getInfoGoodCount());
					json.put("isPraise", newsInfoContent.getIsPraise());
					json.put("infoCommentCount", newsInfoContent.getInfoCommentCount());
					json.put("collectNumber", newsInfoContent.getCollectNumber());
					json.put("isCollect", newsInfoContent.getIsCollect());
					json.put("transmitNumber", newsInfoContent.getTransmitNumber());
					json.put("createTime", newsInfoContent.getCreateTime());
					json.put("modifyTime", newsInfoContent.getModifyTime());
					json.put("publishTime", newsInfoContent.getPublishTime());
			}
			resJson=new ResultJSON("COMMON_200");
			resJson.setBody(json);
			log.info("NewsCommentController.page:获取新闻列表成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			e.printStackTrace();
			throw BusinessException.build("NEWS_14002", "获取新闻列表");
		}
		return resJson;
	}

	/**
	 *
	 * @Title: addNewsInfoReport
	 * @Description: 举报新闻
	 * @param newsInfoInformVo
	 * @return    参数
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException
	 */
	@RequestMapping("/addNewsInfoReport")
	@ResponseBody
	public ResultJSON addNewsInfoReport(@RequireValid NewsInfoInformVo newsInfoInformVo) throws BusinessException{
		ResultJSON resJson = null ;
		JSONObject body = new JSONObject();
		try {
			String userCode = newsInfoInformVo.getUserCode() ;
			//获取用户信息
			SysUserInfo sysUserInfo = sysUserService.selectByCode(userCode) ;
			NewsInfoInformModel newsInfoInformModel = new NewsInfoInformModel() ;
			newsInfoInformModel.setInformPeopleCode(userCode);
			newsInfoInformModel.setNewsCode(newsInfoInformVo.getNewsCode());
			newsInfoInformModel.setInformType(newsInfoInformVo.getInformType());
			newsInfoInformModel.setInfoCreatorCode(newsInfoInformVo.getInfoCreatorCode());
			newsInfoInformModel.setOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
			newsInfoInformModel.setTenantCode(sysUserInfo.getTenantCode());
			//查询条件
			boolean flag=newsInfoInformService.addNewsInfoReportThird(newsInfoInformModel);
			if(flag){
				resJson=new ResultJSON("COMMON_200");
				resJson.setBody(body);
			}
			log.info("NewsCommentController.addNewsInfoReport:新闻举报成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "新闻举报列表");
		}
		return resJson;
	}

	/**
	 *
	 * @Title: addNewsInfoComment
	 * @Description: 新闻评论
	 * @param newsCommentVo
	 * @return    参数
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException
	 */

	@RequestMapping("/addNewsInfoComment")
	@ResponseBody
	public ResultJSON addNewsInfoComment(@RequireValid NewsCommentVo newsCommentVo) throws BusinessException{
        NewsCommentModel newsCommentModel = null ;
		ResultJSON resJson = null ;
        JSONObject json = new JSONObject() ;
		JSONObject body = new JSONObject();
		try {
			//获取用户信息
			SysUserInfo sysUserInfo = sysUserService.selectByCode(newsCommentVo.getUserCode()) ;
			newsCommentModel = new NewsCommentModel() ;
            newsCommentModel.setNewsCode(newsCommentVo.getNewsCode());
            newsCommentModel.setCommentContent(newsCommentVo.getCommentContent());
            newsCommentModel.setRevertPeopleCode(newsCommentVo.getRevertPeopleCode());
            newsCommentModel.setTenantCode(sysUserInfo.getTenantCode());
            newsCommentModel.setOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
            newsCommentModel.setUserCode(newsCommentVo.getUserCode());
            newsCommentModel.setIsDelete(NewsConstants.NEWS_NO_DELETE);
            newsCommentModel.setIsShield(NewsConstants.NEWS_NO_SHIELD);
            newsCommentModel.setCommentLikeNum(0);
            newsCommentModel.setCommentReplyNum(0);
            newsCommentModel.setCommentReportNum(0);
			//查询条件
            NewsInfoComment newsInfoComment = newsCommentService.addNewsComment(newsCommentModel);
			if(null != newsInfoComment){
				RelationDataVO  relationDataVO = generateRelationDataVO(newsInfoComment.getCommentCode(),10,1);
				producerTeplate.send(NewsConstants.NEWS_TOPIC, JSONObject.toJSONString(relationDataVO));
                SysOrgInfo sysOrgInfo =  sysOrgService.selectByCode(newsInfoComment.getOrgCode()) ;
                json.put("id", newsInfoComment.getId());
                json.put("infoCommentCode", newsInfoComment.getCommentCode());
                json.put("newsCode",newsInfoComment.getNewsCode());
                json.put("userCode",newsInfoComment.getUserCode());
                json.put("userName", sysUserInfo == null ? "" : sysUserInfo.getUserName());
                json.put("orgCode",newsInfoComment.getOrgCode());
                json.put("orgName", sysOrgInfo==null?"":sysOrgInfo.getSysOrgName());
                json.put("commentContent",newsInfoComment.getCommentContent());
                json.put("commentGoodCount", newsInfoComment.getCommentLikeNum());
                json.put("isPraise", 0);
                json.put("createTime", newsInfoComment.getCreateTime());
                json.put("modifyTime", newsInfoComment.getModifyTime());
                resJson=new ResultJSON("COMMON_200");
				resJson.setBody(json);
			}
			log.info("NewsCommentController.addNewsInfoHistory:新闻发布，回复评论成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "新闻发布，回复评论操作");
		}
		return resJson;
	}

	/**
	 *
	 * @Title: deleteNewsInfoComment
	 * @Description: 删除新闻评论
	 * @param newsCommentDeleteVo
	 * @return    参数
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException
	 */

	@RequestMapping("/deleteNewsInfoComment")
	@ResponseBody
	public ResultJSON deleteNewsInfoComment(@RequireValid NewsCommentDeleteVo newsCommentDeleteVo) throws BusinessException{
        NewsCommentModel newsCommentModel = null ;
		ResultJSON resJson = null ;
        JSONObject json = new JSONObject() ;
		JSONObject body = new JSONObject();
		try {
			//获取用户信息
			newsCommentModel = new NewsCommentModel() ;
            newsCommentModel.setCommentCode(newsCommentDeleteVo.getCommentCode());
            newsCommentModel.setUserCode(newsCommentDeleteVo.getUserCode());
			//查询条件
            boolean flag = newsCommentService.deleteNewsComment(newsCommentModel);
            if(flag){
                resJson=new ResultJSON("COMMON_200");
                resJson.setBody(body);
            }
			log.info("NewsCommentController.addNewsInfoHistory:新闻评论删除成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "新闻评论删除");
		}
		return resJson;
	}

    /**
     *
     * @Title: getNewsInfoComments
     * @Description: 新闻评论列表查询
     * @param newsCommentListVO
     * @return    参数
     * @return: ResultJSON    返回类型
     * @throws BusinessException
     */
    @RequestMapping("/getNewsInfoComments")
    @ResponseBody
    public ResultJSON getNewsInfoComments(@RequireValid NewsCommentListVO newsCommentListVO) throws BusinessException{
        NewsCommentQuery newsCommentQuery=null;
        ResultJSON resJson = null ;
        JSONObject json = null  ;
        JSONArray jsonArray=new JSONArray();
        JSONObject body = new JSONObject();
        try {
            newsCommentQuery = new NewsCommentQuery() ;
            newsCommentQuery.setUserCode(newsCommentListVO.getUserCode());
            newsCommentQuery.setPageNo(newsCommentListVO.getPageNo());
            newsCommentQuery.setPageSize(newsCommentListVO.getPageSize());
            newsCommentQuery.setLimitStart(newsCommentListVO.getPageNo()*newsCommentListVO.getPageSize());
			newsCommentQuery.setNewsCode(newsCommentListVO.getNewsCode());
            newsCommentQuery.setIsShield(NewsConstants.NEWS_NO_SHIELD);
            newsCommentQuery.setIsDelete(NewsConstants.NEWS_NO_DELETE);
			//查询条件
			PageBean pageBean=newsCommentService.getNewsComments(newsCommentQuery);
			//返回值封装
			List<NewsCommentModel> list = pageBean.getRecordList();
			//根据用户code列表获取用户集合
			if(list.size()>0){
				List<String> usercodes = new ArrayList<>();
				List<String> orgcodes = new ArrayList<>();
				for(NewsCommentModel newsInfoComment : list){
					usercodes.add(newsInfoComment.getUserCode()) ;
					orgcodes.add(newsInfoComment.getOrgCode()) ;
				}
				Map<String,Object> userMap = sysUserService.selectMapByCodes(usercodes);
				List<SysOrgInfo> sysOrgInfos = sysOrgService.selectByCodes(orgcodes) ;
				Map<String, SysOrgInfo> orgMap = generateOrgInfoMap(sysOrgInfos);
				for(int i=0;i<list.size();i++){
					json=new JSONObject();
					NewsCommentModel temp=list.get(i);
					json.put("id", temp.getId());
					json.put("infoCommentCode", temp.getCommentCode());
					json.put("newsCode",temp.getNewsCode());
					json.put("userCode",temp.getUserCode());
					SysUserInfo creator = (SysUserInfo)userMap.get(temp.getUserCode());
					json.put("userName", creator == null ? "" : creator.getUserName());
					json.put("headPortrait", creator == null ? "" : creator.getHeadPortrait());
					json.put("orgCode",temp.getOrgCode());
					SysOrgInfo sysOrgnfo = orgMap.get(temp.getOrgCode()) ;
					json.put("orgName", sysOrgnfo==null?"":sysOrgnfo.getSysOrgName());
					json.put("commentContent",temp.getCommentContent());
					json.put("commentReplyNum",temp.getCommentReplyNum());
					json.put("commentGoodCount", temp.getCommentLikeNum());
					json.put("isPraise", temp.getIsPraise());
					json.put("createTime", temp.getCreateTime());
					json.put("modifyTime", temp.getModifyTime());

					jsonArray.add(json) ;
				}
			}
			resJson=new ResultJSON("COMMON_200");
			body.put("totalCount", pageBean.getTotalCount());
			body.put("list", jsonArray);
			resJson.setBody(body);

			log.info("NewsCommentController.page:新闻评论列表查询成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "获取新闻评论列表");
		}
		return resJson;
    }


	/**
	 *
	 * @Title: getNewsInfoReples
	 * @Description: 新闻回复列表查询
	 * @param newsReplyListVO
	 * @return    参数
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException
	 */
	@RequestMapping("/getNewsInfoReples")
	@ResponseBody
	public ResultJSON getNewsInfoReples(@RequireValid NewsReplyListVO newsReplyListVO) throws BusinessException{
		NewsReplyQuery newsReplyQuery=null;
		ResultJSON resJson = null ;
		JSONObject json = null ;
		JSONArray jsonArray=new JSONArray();
		JSONObject body = new JSONObject();
		try {
			newsReplyQuery = new NewsReplyQuery() ;
			newsReplyQuery.setUserCode(newsReplyListVO.getUserCode());
			newsReplyQuery.setNewsCommentCode(newsReplyListVO.getCommentCode());
			newsReplyQuery.setPageSize(newsReplyListVO.getPageSize());
			newsReplyQuery.setLimitStart(newsReplyListVO.getLimitStart());
			newsReplyQuery.setReplyIsDelete(NewsReplyConstants.NEWS_REPLY_NOT_DELETE);
            newsReplyQuery.setReplyIsShield(NewsReplyConstants.NEWS_REPLY_NOT_SHIELD);
            //查询条件
			PageBean pageBean=newsReplyService.getNewsReplesPC(newsReplyQuery);
			//返回值封装
			List<NewsReply> list = pageBean.getRecordList();
			//根据用户code列表获取用户集合
			if(list.size()>0) {
				List<String> usercodes = new ArrayList<>();
				List<String> orgcodes = new ArrayList<>();
				for(NewsReply newsReply : list){
					usercodes.add(newsReply.getUserCode()) ;
					if (null != newsReply.getToReplyUserCode()) {
						usercodes.add(newsReply.getToReplyUserCode()) ;
					}
					orgcodes.add(newsReply.getOrgCode()) ;
					if(null !=newsReply.getToReplyOrgCode()){
						orgcodes.add(newsReply.getToReplyOrgCode()) ;
					}
				}
				Map<String,Object> userMap = sysUserService.selectMapByCodes(usercodes);
				List<SysOrgInfo> sysOrgInfos = sysOrgService.selectByCodes(orgcodes) ;
				Map<String, SysOrgInfo> orgMap = generateOrgInfoMap(sysOrgInfos);
				for(int i=0;i<list.size();i++){
					json=new JSONObject();
					NewsReply temp=list.get(i);
					json.put("replyCode", temp.getReplyCode());
					json.put("userCode",temp.getUserCode());
					json.put("replyContent",temp.getReplyContent());
					SysUserInfo replyUser = ( SysUserInfo)userMap.get(temp.getUserCode());
					json.put("userName", replyUser == null ? "" : replyUser.getUserName());
					json.put("headPortrait", replyUser == null ? "" : replyUser.getHeadPortrait());
					json.put("orgCode",temp.getOrgCode());
					SysOrgInfo sysOrginfo = orgMap.get(temp.getOrgCode()) ;
					json.put("orgName", sysOrginfo==null?"":sysOrginfo.getSysOrgName());

					json.put("revertPeopleCode", temp.getToReplyUserCode());
					SysUserInfo revertUserInfo = ( SysUserInfo)userMap.get(temp.getToReplyUserCode());
					json.put("revertPeopleName", revertUserInfo==null?"":revertUserInfo.getUserName());
					json.put("revertHeadPortrait", revertUserInfo==null?"":revertUserInfo.getHeadPortrait());
					json.put("revertOrgCode", temp.getToReplyOrgCode());
					SysOrgInfo sysOrginforevert = orgMap.get(temp.getOrgCode()) ;
					json.put("revertOrgName", sysOrginforevert==null?"":sysOrginforevert.getSysOrgName());
					json.put("replyLikeNum",temp.getReplyLikeNum());
					json.put("isPraise",temp.getIsPraise());
					json.put("replyReplyNum", temp.getReplyReportNum());
					json.put("createTime", temp.getCreateTime());
					json.put("modifyTime", temp.getModifyTime());
					jsonArray.add(json) ;
				}
			}
			resJson=new ResultJSON("COMMON_200");
			body.put("totalCount", pageBean.getTotalCount());
			body.put("list", jsonArray);
			resJson.setBody(body);

			log.info("NewsCommentController.page:新闻评论列表查询成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "获取新闻评论列表");
		}
		return resJson;
	}


    /**
     *
     * @Title: addNewsInfoReply
     * @Description: 新闻评论回复
     * @param newsReplyVo
     * @return    参数
     * @return: ResultJSON    返回类型
     * @throws BusinessException
     */
    @RequestMapping("/addNewsInfoReply")
    @ResponseBody
    public ResultJSON addNewsInfoReply(@RequireValid NewsReplyVo newsReplyVo) throws BusinessException{
        NewsReplyModel newsReplyModel = null ;
        ResultJSON resJson = null ;
        JSONObject json = new JSONObject() ;
        JSONObject body = new JSONObject();
        try {
            //获取用户信息
            SysUserInfo sysUserInfo = sysUserService.selectByCode(newsReplyVo.getUserCode()) ;
            newsReplyModel = new NewsReplyModel() ;
            newsReplyModel.setNewsCode(newsReplyVo.getNewsCode());
            newsReplyModel.setCommentCode(newsReplyVo.getCommentCode());
            newsReplyModel.setReplyContent(newsReplyVo.getReplyContent());
            newsReplyModel.setRevertPeopleCode(newsReplyVo.getRevertPeopleCode());
            SysUserInfo revertUserInfo=null ;
			if(!"".equals(newsReplyVo.getRevertPeopleCode())){
                revertUserInfo = sysUserService.selectByCode(newsReplyVo.getRevertPeopleCode()) ;
                newsReplyModel.setRevertOrgCode(revertUserInfo.getManageOrgInfo().getManOrgCode());
            }
            newsReplyModel.setTenantCode(sysUserInfo.getTenantCode());
            newsReplyModel.setOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
            newsReplyModel.setUserCode(newsReplyVo.getUserCode());
            newsReplyModel.setIsDelete(NewsConstants.NEWS_NO_DELETE);
            newsReplyModel.setIsShield(NewsConstants.NEWS_NO_SHIELD);
            newsReplyModel.setCommentLikeNum(0);
            newsReplyModel.setCommentReplyNum(0);
            newsReplyModel.setCommentReportNum(0);
            //查询条件
            NewsReply newsReply = newsReplyService.addNewsReplyPC(newsReplyModel);
            if(null != newsReply){
				List<String> orgCodes = new ArrayList<>() ;
				orgCodes.add(newsReply.getOrgCode()) ;
				orgCodes.add(newsReply.getToReplyOrgCode()) ;
				List<SysOrgInfo> sysOrgInfos = sysOrgService.selectByCodes(orgCodes) ;
				Map<String,SysOrgInfo> orgInfoMap = generateOrgInfoMap(sysOrgInfos) ;
                json.put("replyCode", newsReply.getReplyCode());
                json.put("userCode",newsReply.getUserCode());
                json.put("replyContent",newsReply.getReplyContent());
                json.put("userName", sysUserInfo == null ? "" : sysUserInfo.getUserName());
				json.put("headPortrait", sysUserInfo == null ? "" : sysUserInfo.getHeadPortrait());
                json.put("orgCode",newsReply.getOrgCode());
				SysOrgInfo sysOrgInfo = orgInfoMap.get(newsReply.getOrgCode()) ;
                json.put("orgName", sysOrgInfo==null?"":sysOrgInfo.getSysOrgName());

				json.put("revertPeopleCode", newsReply.getToReplyUserCode());
				json.put("revertPeopleName", revertUserInfo==null?"":revertUserInfo.getUserName());
				json.put("revertHeadPortrait", revertUserInfo==null?"":revertUserInfo.getHeadPortrait());
				json.put("revertOrgCode", newsReply.getToReplyOrgCode());
				SysOrgInfo sysOrginforevert = orgInfoMap.get(newsReply.getToReplyOrgCode()) ;
				json.put("revertOrgName", sysOrginforevert==null?"":sysOrginforevert.getSysOrgName());

                json.put("replyLikeNum",newsReply.getReplyLikeNum());
                json.put("isPraise",0);//当前用户对新增的没有点赞记录
                json.put("replyReplyNum", newsReply.getReplyReportNum());
                json.put("createTime", newsReply.getCreateTime());
                json.put("modifyTime", newsReply.getModifyTime());
                resJson=new ResultJSON("COMMON_200");
                resJson.setBody(json);
            }
            log.info("NewsCommentController.addNewsInfoHistory:新闻评论回复成功");
        } catch (BusinessException e) {
            throw e;
        } catch (Exception e) {
            throw BusinessException.build("NEWS_14002", "新闻评论回复操作");
        }
        return resJson;
    }

    /**
     *
     * @Title: deleteNewsInfoReply
     * @Description: 删除新闻回复
     * @param newsReplyDeleteVO
     * @return    参数
     * @return: ResultJSON    返回类型
     * @throws BusinessException
     */

    @RequestMapping("/deleteNewsInfoReply")
    @ResponseBody
    public ResultJSON deleteNewsInfoReply(@RequireValid NewsReplyDeleteVO newsReplyDeleteVO) throws BusinessException{
        NewsReplyModel newsReplyModel = null ;
        ResultJSON resJson = null ;
        JSONObject json = new JSONObject() ;
        JSONObject body = new JSONObject();
        try {
            //获取用户信息
            newsReplyModel = new NewsReplyModel() ;
            newsReplyModel.setReplyCode(newsReplyDeleteVO.getReplyCode());
            newsReplyModel.setCommentCode(newsReplyDeleteVO.getCommentCode());
            newsReplyModel.setUserCode(newsReplyDeleteVO.getUserCode());
            //查询条件
            boolean flag = newsReplyService.deleteNewsReply(newsReplyModel);
            if(flag){
                resJson=new ResultJSON("COMMON_200");
                resJson.setBody(body);
            }
            log.info("NewsCommentController.addNewsInfoHistory:新闻评论删除成功");
        } catch (BusinessException e) {
            throw e;
        } catch (Exception e) {
            throw BusinessException.build("NEWS_14002", "新闻评论删除");
        }
        return resJson;
    }

    /**
	 *
	 * @Title: updateNewsInfoGood
	 * @Description: 新闻点赞
	 * @param newsPraiseVo
	 * @return    参数
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException
	 */
	@RequestMapping("/updateNewsInfoGood")
	@ResponseBody
	public ResultJSON updateNewsInfoGood(@RequireValid NewsPraiseVo newsPraiseVo) throws BusinessException{
        NewsPraiseModel newsPraiseModel = null ;
		ResultJSON resJson = null ;
		JSONObject body = new JSONObject();
		try {
			//获取用户信息
			SysUserInfo sysUserInfo = sysUserService.selectByCode(newsPraiseVo.getUserCode()) ;
            newsPraiseModel = new NewsPraiseModel();
            newsPraiseModel.setNewsCode(newsPraiseVo.getNewsCode());
            newsPraiseModel.setUserCode(newsPraiseVo.getUserCode());
            newsPraiseModel.setPraisePeopleCode(sysUserInfo.getUserCode());
            newsPraiseModel.setPraiseOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
            newsPraiseModel.setTenantCode(sysUserInfo.getTenantCode());
//            SysUserInfo revertPeople = sysUserService.selectByCode(newsPraiseVo.getRevertPeopleCode()) ;
//            newsPraiseModel.setRevertPeopleCode(newsPraiseVo.getRevertPeopleCode());
//            newsPraiseModel.setRevertPeopleOrg(revertPeople.getOrgCode());
            newsPraiseModel.setOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
			newsPraiseModel.setActionType(Integer.valueOf(newsPraiseVo.getActionType()));
			//查询条件
			boolean flag = newsCommentService.updateNewsInfoGood(newsPraiseModel);
			if(flag){
				RelationDataVO  relationDataVO = generateRelationDataVO(newsPraiseVo.getNewsCode(),7,Integer.valueOf(newsPraiseVo
						.getActionType()));
				producerTeplate.send(NewsConstants.NEWS_TOPIC, JSONObject.toJSONString(relationDataVO));
				resJson=new ResultJSON("COMMON_200");
				resJson.setBody(body);
			}
			log.info("NewsCommentController.updateNewsInfosMove:新闻点赞成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "新闻点赞");
		}
		return resJson;
	}

	/**
	 *
	 * @Title: updateNewsInfoCommentGood
	 * @Description: 新闻评论点赞
	 * @param newsCommentPraiseVo
	 * @return    参数
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException
	 */
	@RequestMapping("/updateNewsInfoCommentGood")
	@ResponseBody
	public ResultJSON updateNewsInfoCommentGood(@RequireValid NewsCommentPraiseVo newsCommentPraiseVo) throws BusinessException{
        NewsCommentPraiseModel newsCommentPraiseModel = null ;
		ResultJSON resJson = null ;
		JSONObject body = new JSONObject();
		try {
            //获取用户信息
            SysUserInfo sysUserInfo = sysUserService.selectByCode(newsCommentPraiseVo.getUserCode()) ;
            newsCommentPraiseModel = new NewsCommentPraiseModel();
            newsCommentPraiseModel.setNewsCode(newsCommentPraiseVo.getNewsCode());
            newsCommentPraiseModel.setUserCode(newsCommentPraiseVo.getUserCode());
            newsCommentPraiseModel.setPraisePeopleCode(newsCommentPraiseVo.getUserCode());
            newsCommentPraiseModel.setPraisePeopleOrg(sysUserInfo.getManageOrgInfo().getManOrgCode());
            newsCommentPraiseModel.setTenantCode(sysUserInfo.getTenantCode());
			newsCommentPraiseModel.setCommentCode(newsCommentPraiseVo.getCommentCode());
            SysUserInfo revertPeople = sysUserService.selectByCode(newsCommentPraiseVo.getCommentUserCode()) ;
            newsCommentPraiseModel.setRevertPeopleCode(newsCommentPraiseVo.getCommentUserCode());
            newsCommentPraiseModel.setRevertPeopleOrg(revertPeople.getManageOrgInfo().getManOrgCode());
            newsCommentPraiseModel.setOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
			newsCommentPraiseModel.setActionType(Integer.valueOf(newsCommentPraiseVo.getActionType()));
            //查询条件
            boolean flag = newsCommentService.updateNewsInfoCommentGood(newsCommentPraiseModel);
            if(flag){
                resJson=new ResultJSON("COMMON_200");
                resJson.setBody(body);
            }
            log.info("NewsCommentController.updateNewsInfoCommentGood:新闻评论点赞成功");
        } catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "新闻评论");
		}
		return resJson;
	}

	/**
	 *
	 * @Title: updateNewsReplyGood
	 * @Description: 新闻回复点赞
	 * @param newsReplyPraiseVo
	 * @return    参数
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException
	 */
	@RequestMapping("/updateNewsReplyGood")
	@ResponseBody
	public ResultJSON updateNewsReplyGood(@RequireValid NewsReplyPraiseVo newsReplyPraiseVo) throws BusinessException{
		NewsReplyPraiseModel newsReplyPraiseModel = null ;
		ResultJSON resJson = null ;
		JSONObject body = new JSONObject();
		try {
            //获取用户信息
            SysUserInfo sysUserInfo = sysUserService.selectByCode(newsReplyPraiseVo.getUserCode()) ;
			newsReplyPraiseModel = new NewsReplyPraiseModel();
			newsReplyPraiseModel.setNewsCode(newsReplyPraiseVo.getNewsCode());
			newsReplyPraiseModel.setUserCode(newsReplyPraiseVo.getUserCode());
			newsReplyPraiseModel.setPraisePeopleCode(newsReplyPraiseVo.getUserCode());
			newsReplyPraiseModel.setPraiseOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
			newsReplyPraiseModel.setTenantCode(sysUserInfo.getTenantCode());
			newsReplyPraiseModel.setNewsReplyCode(newsReplyPraiseVo.getReplyCode());
			newsReplyPraiseModel.setNewsCommentCode(newsReplyPraiseVo.getCommentCode());
            SysUserInfo revertPeople = sysUserService.selectByCode(newsReplyPraiseVo.getRevertUserCode()) ;
			newsReplyPraiseModel.setRevertPeopleCode(newsReplyPraiseVo.getRevertUserCode());
			newsReplyPraiseModel.setRevertPeopleOrg(revertPeople.getManageOrgInfo().getManOrgCode());
			newsReplyPraiseModel.setOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
			newsReplyPraiseModel.setActionType(Integer.valueOf(newsReplyPraiseVo.getActionType()));
            //查询条件
            boolean flag = newsReplyService.updateNewsReplyGood(newsReplyPraiseModel);
            if(flag){
                resJson=new ResultJSON("COMMON_200");
            }else{
				resJson=new ResultJSON("NEWS_14002");
			}
			resJson.setBody(body);
            log.info("NewsCommentController.updateNewsInfoCommentGood:新闻回复点赞成功");
        } catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "新闻回复点赞");
		}
		return resJson;
	}

    /**
	 *
	 * @Title: addNewsInfoCollect
	 * @Description: 新闻收藏
	 * @param newsPraiseVo
	 * @return    参数
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException
	 */
	@RequestMapping("/addNewsInfoCollect")
	@ResponseBody
	public ResultJSON addNewsInfoCollect(@RequireValid NewsPraiseVo newsPraiseVo) throws BusinessException{
        NewsCollectModel newsCollectModel = null ;
		ResultJSON resJson = null ;
		JSONObject body = new JSONObject();
		try {
			//获取用户信息
			SysUserInfo sysUserInfo = sysUserService.selectByCode(newsPraiseVo.getUserCode()) ;
            newsCollectModel = new NewsCollectModel() ;
            newsCollectModel.setNewsCode(newsPraiseVo.getNewsCode());
            newsCollectModel.setUserCode(newsPraiseVo.getUserCode());
            newsCollectModel.setOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
            newsCollectModel.setTenantCode(sysUserInfo.getTenantCode());
			newsCollectModel.setActionType(Integer.valueOf(newsPraiseVo.getActionType()));

			newsCollectModel.setCollectCode(UUIDHelper.getUUID());
			//查询条件
			boolean flag = newsCollectService.addNewsInfoCollect(newsCollectModel);
			if(flag){
				RelationDataVO  relationDataVO = generateRelationDataVO(newsCollectModel.getNewsCode(),8,Integer.valueOf(newsPraiseVo.getActionType
						()));
				producerTeplate.send(NewsConstants.NEWS_TOPIC, JSONObject.toJSONString(relationDataVO));
				resJson=new ResultJSON("COMMON_200");
				resJson.setBody(body);
			}
			log.info("NewsCommentController.addNewsInfoCollect:新闻收藏成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "新闻收藏");
		}
		return resJson;
	}

    /**
	 *
	 * @Title: addNewsInfoTransmit
	 * @Description: 新闻转发
	 * @param newsPraiseVo
	 * @return    参数
	 * @return: ResultJSON    返回类型
	 * @throws BusinessException
	 */
	@RequestMapping("/addNewsInfoTransmit")
	@ResponseBody
	public ResultJSON addNewsInfoTransmit(@RequireValid NewsPraiseVo newsPraiseVo) throws BusinessException{
        NewsTransmitModel newsTransmitModel = null ;
		ResultJSON resJson = null ;
		JSONObject body = new JSONObject();
		try {
			//获取用户信息
			SysUserInfo sysUserInfo = sysUserService.selectByCode(newsPraiseVo.getUserCode()) ;
            newsTransmitModel = new NewsTransmitModel() ;
            newsTransmitModel.setNewsCode(newsPraiseVo.getNewsCode());
            newsTransmitModel.setUserCode(newsPraiseVo.getUserCode());
            newsTransmitModel.setOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
            newsTransmitModel.setTenantCode(sysUserInfo.getTenantCode());
			newsTransmitModel.setTransmitCode(UUIDHelper.getUUID());
			//查询条件
			boolean flag = newsCollectService.addNewsInfoTransmit(newsTransmitModel);
			if(flag){
				NewsQuery newsQuery = new NewsQuery() ;
				newsQuery.setNewsCode(newsPraiseVo.getNewsCode());
				NewsInfoContent newsInfoContent =  newsInfoContentService.getNewsInfoDetail(newsQuery) ;
				RelationDynamic relationDynamic  = generateRelationDynamic(newsTransmitModel,sysUserInfo);
				// RelationSubjectInfo relationSubjectInfo = generateRelationInfo(newsTransmitModel,newsInfoContent,sysUserInfo);
				boolean relationFlag =  relationThirdDynamicService.saveDynamic(relationDynamic,null,null,null);
				RelationDataVO  relationDataVO = generateRelationDataVO(newsPraiseVo.getNewsCode(),9,Integer.valueOf(newsPraiseVo
						.getActionType()));
				producerTeplate.send(NewsConstants.NEWS_TOPIC, JSONObject.toJSONString(relationDataVO));
				if(relationFlag){
					resJson = new ResultJSON("COMMON_200");
				}else{
					throw BusinessException.build("NEWS_14009", "转发新闻");
				}
			}
			resJson.setBody(body);
			log.info("NewsCommentController.addNewsInfoTransmit:新闻转发成功");
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw BusinessException.build("NEWS_14002", "新闻转发");
		}
		return resJson;
	}

	private RelationDataVO generateRelationDataVO(String subjectCode,int updateClass,int actionType){
		RelationDataVO relationDataVO = new RelationDataVO() ;
		relationDataVO.setSubjectCode(subjectCode);
		relationDataVO.setUpdateClass((byte)updateClass);
		relationDataVO.setModifyTime(System.currentTimeMillis());
		if(actionType == 0){
			relationDataVO.setUpdateNumber(-1);
		}else{
			relationDataVO.setUpdateNumber(1);
		}
		return relationDataVO ;
	}


	private RelationDynamic generateRelationDynamic(NewsTransmitModel newsTransmitModel, SysUserInfo sysUserInfo) {
		RelationDynamic relationDynamic = new RelationDynamic() ;
		relationDynamic.setUserCode(sysUserInfo.getUserCode());
        relationDynamic.setOrgCode(newsTransmitModel.getOrgCode());
		relationDynamic.setTenantCode(sysUserInfo.getTenantCode());
		relationDynamic.setDynamicCode(newsTransmitModel.getTransmitCode());
		long currentTime = System.currentTimeMillis() ;
		relationDynamic.setCreateTime(currentTime);
		relationDynamic.setModifyTime(currentTime);
		relationDynamic.setDynamicClass((byte)11);
		relationDynamic.setDynamicDepend((byte)1);
		relationDynamic.setUserCode(sysUserInfo.getUserCode());
		relationDynamic.setOperateTime(currentTime);
		relationDynamic.setSubjectCode(newsTransmitModel.getNewsCode());
		relationDynamic.setDynamicIsDelete((byte)0);
		relationDynamic.setDynamicIsShield((byte)0);
		relationDynamic.setIsSubjectShow((byte)1);
		relationDynamic.setIsSubjectDataShow((byte)0);
		return relationDynamic ;
	}

	private RelationSubjectInfo generateRelationInfo(NewsTransmitModel newsTransmitModel,NewsInfoContent newsInfoContent, SysUserInfo
			sysUserInfo) {
		RelationSubjectInfo relationSubjectInfo = new RelationSubjectInfo();
		relationSubjectInfo.setSubjectCode(newsInfoContent.getNewsCode());
		relationSubjectInfo.setTenantCode(sysUserInfo.getTenantCode());
		long currentTiem = System.currentTimeMillis() ;
		relationSubjectInfo.setCreateTime(currentTiem);
		relationSubjectInfo.setModifyTime(currentTiem);
		relationSubjectInfo.setSubjectClass((byte)5);//新闻公告
		relationSubjectInfo.setSubjectDepend((byte)3);//组织
		relationSubjectInfo.setUserCode(newsInfoContent.getInfoCreatorCode());
		relationSubjectInfo.setSubjectPublishTime(currentTiem);
		relationSubjectInfo.setSubjectTitle(newsInfoContent.getInfoTitle());
		relationSubjectInfo.setSubjectDigest(newsInfoContent.getInfoContentText());
		relationSubjectInfo.setSubjectUrl(newsInfoContent.getFileUrl());//链接
		relationSubjectInfo.setSubjectSource((byte)1);//原创
		relationSubjectInfo.setSourceIsDelete((byte)0);
		relationSubjectInfo.setSourceIsShield((byte)0);
		relationSubjectInfo.setSubjectIsDelete((byte)0);
		relationSubjectInfo.setSubjectIsShield((byte)0);
		return relationSubjectInfo ;
	}

	private Map<String, SysUserInfo> generateUserInfoMap(List<SysUserInfo> userInfos) {
		Map<String, SysUserInfo> users = new HashMap<String, SysUserInfo>();
		for (SysUserInfo sysUserInfo : userInfos) {
			users.put(sysUserInfo.getUserCode(), sysUserInfo);
		}
		return users;
	}

	private Map<String,SysOrgInfo> generateOrgInfoMap(List<SysOrgInfo> sysOrgInfos) {
		Map<String, SysOrgInfo> orgInfos = new HashMap<String, SysOrgInfo>();
		for (SysOrgInfo sysOrgInfo : sysOrgInfos) {
			orgInfos.put(sysOrgInfo.getManOrgCode(), sysOrgInfo);
		}
		return orgInfos;
	}


}
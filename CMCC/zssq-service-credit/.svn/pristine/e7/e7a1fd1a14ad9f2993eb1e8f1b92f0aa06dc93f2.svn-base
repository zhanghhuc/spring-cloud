package com.zssq.service.impl;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.zssq.dao.mapper.CoinAccountDetailMapper;
import com.zssq.dao.mapper.CoinAccountMapper;
import com.zssq.dao.mapper.ExpAccountDetailMapper;
import com.zssq.dao.mapper.ExpAccountMapper;
import com.zssq.dao.mapper.IntegralAccountDetailMapper;
import com.zssq.dao.mapper.IntegralAccountMapper;
import com.zssq.dao.mapper.IntegralActionMapper;
import com.zssq.dao.mapper.UserLevelConfigMapper;
import com.zssq.dao.pojo.CoinAccount;
import com.zssq.dao.pojo.CoinAccountDetail;
import com.zssq.dao.pojo.ExpAccount;
import com.zssq.dao.pojo.ExpAccountDetail;
import com.zssq.dao.pojo.IntegralAccount;
import com.zssq.dao.pojo.IntegralAccountDetail;
import com.zssq.dao.pojo.IntegralAction;
import com.zssq.dao.pojo.MessageIntegral;
import com.zssq.dao.pojo.UserLevelConfig;
import com.zssq.kafka.KafkaService;

@Service("consumerService")
public class ConsumerService implements KafkaService {

	/** 打印日志 */
	private static final Logger logger = LoggerFactory.getLogger(ConsumerService.class);

	/** 积分行为映射器 */
	@Autowired
	IntegralActionMapper integralActionMapper;
	/** 积分账户映射器 */
	@Autowired
	IntegralAccountMapper integralAccountMapper;
	/** 积分明细映射器 */
	@Autowired
	IntegralAccountDetailMapper integralAccountDetailMapper;
	/** 金币账户映射器 */
	@Autowired
	CoinAccountMapper coinAccountMapper;
	/** 金币明细映射器 */
	@Autowired
	CoinAccountDetailMapper coinAccountDetailMapper;
	/** 经验值账户映射器 */
	@Autowired
	ExpAccountMapper expAccountMapper;
	/** 经验值等级配置映射器 */
	@Autowired
	UserLevelConfigMapper userLevelConfigMapper;
	/** 经验值明细映射器 */
	@Autowired
	ExpAccountDetailMapper expAccountDetailMapper;

	@Override
	public void invokeService(ConsumerRecord record) throws Exception {

		// 消费的json字符串
		String jsonStr = (String) record.value();
		// 将json字符串转换为积分消息对象
		MessageIntegral integral = JSON.parseObject(jsonStr, MessageIntegral.class);
		// 积分行为编号
		String actionCode = integral.getActionCode();
		// 积分账户编号
		String accountCode = integral.getAccountCode();
		// 积分行为类型：1-个人，2-班组，3-公司
		Byte accountType = integral.getAccountType();
		// 所属行政组织编号
		String manageOrgCode = integral.getManageOrgCode();

		// 根据积分行为编号获取积分行为信息
		IntegralAction integralAction = integralActionMapper.selectByActionCode(actionCode);

		if (integralAction == null) {
			logger.info("输入的积分行为编号action_code:{} not found in integral_action", actionCode);
		} else {
			// 积分、金币、经验值每日奖励次数限制
			Byte limit = integralAction.getActionCycleCount();

			// 日期格式化，格式为yyyyMMdd
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
			// 获取当天日历calendar
			Calendar calendar = Calendar.getInstance();
			// 获取当天日期Date
			Date today = calendar.getTime();
			// 获取当天00:00:00的毫秒值
			long start = sdf.parse(sdf.format(today)).getTime();
			// 将日历calendar设置为第二天
			calendar.add(Calendar.DAY_OF_MONTH, 1);
			// 获取第二天日期Date
			Date tomorrow = calendar.getTime();
			// 获取第二天00:00:00的毫秒值
			long end = sdf.parse(sdf.format(tomorrow)).getTime();

			// 封装当天和第二天00:00:00的毫秒值和积分账户编号
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("start", start);
			map.put("end", end);
			map.put("accountCode", accountCode);

			// 根据accountCode查询积分明细表，获取该用户今日已奖励次数
			Integer count = integralAccountDetailMapper.selectTodayCount(map);

			if (limit != null && count >= limit) {
				logger.info("accountCode:{}已超出每日奖励积分的次数，不再奖励积分", accountCode);
			} else {
				logger.info("输入的积分行为编号action_code:{}", actionCode);

				// 若查到的积分值为null，则不需维护积分账户表和积分明细表
				Byte integralValue = integralAction.getIntegralValue();

				// 若查到的金币值为null，则不需维护金币账户表和金币明细表
				Byte coinValue = integralAction.getCoinValue();

				// 若查到的经验值值为null，则不需维护经验值账户表和经验值明细表
				Byte expValue = integralAction.getExpValue();

				// 积分账户表、金币账户表、经验值账户表操作
				integralAccount(accountCode, accountType, integralValue, coinValue, expValue, manageOrgCode);

				// 积分明细表、金币明细表、经验值明细表操作
				integralAccountDetail(actionCode, accountCode, integralValue, coinValue, expValue);

			}

		}

	}

	/**
	 * @Title: integralAccountDetail @Description:
	 *         积分明细表、金币明细表、经验值明细表插入数据 @param @param actionCode @param @param
	 *         accountCode @param @param integralValue 参数 @return void
	 *         返回类型 @throws
	 */
	private void integralAccountDetail(String actionCode, String accountCode, Byte integralValue, Byte coinValue,
			Byte expValue) {
		// 若查到的积分值不为null，则维护积分明细表
		if (integralValue != null) {
			Byte integralAccountDetailType = integralValue > 0 ? (byte) 1 : (byte) 2;
			Integer integralCurrentValue = Math.abs(integralValue);
			// 积分明细
			IntegralAccountDetail integralAccountDetail = new IntegralAccountDetail();
			integralAccountDetail.setAccountCode(accountCode);
			integralAccountDetail.setAccountDetailType(integralAccountDetailType);
			integralAccountDetail.setActionCode(actionCode);
			integralAccountDetail.setCreateTime(System.currentTimeMillis());
			integralAccountDetail.setCurrentValue(integralCurrentValue);
			// 本次增减前余额
			Integer integralFormerBalance = integralAccountDetailMapper.selectBalance(integralAccountDetail);
			// 本次增减后余额
			Integer integralCurrentBalance = (integralFormerBalance == null ? 0 : integralFormerBalance)
					+ integralValue;
			integralAccountDetail.setCurrentBalance(integralCurrentBalance);

			int result = integralAccountDetailMapper.insert(integralAccountDetail);
			if (result == 1) {
				logger.info("积分明细表integral_account_detail insert success");
			} else {
				logger.info("积分明细表integral_account_detail insert failure");
			}
		}

		if (coinValue != null) {
			Byte coinAccountDetailType = coinValue > 0 ? (byte) 1 : (byte) 2;
			Integer coinCurrentValue = Math.abs(coinValue);
			// 金币明细
			CoinAccountDetail coinAccountDetail = new CoinAccountDetail();
			coinAccountDetail.setAccountCode(accountCode);
			coinAccountDetail.setAccountDetailType(coinAccountDetailType);
			coinAccountDetail.setActionCode(actionCode);
			coinAccountDetail.setCreateTime(System.currentTimeMillis());
			coinAccountDetail.setCurrentValue(coinCurrentValue);
			// 本次增减前余额
			Integer coinFormerBalance = coinAccountDetailMapper.selectBalance(coinAccountDetail);
			// 本次增减后余额
			Integer coinCurrentBalance = (coinFormerBalance == null ? 0 : coinFormerBalance) + coinValue;
			coinAccountDetail.setCurrentBalance(coinCurrentBalance);

			int result2 = coinAccountDetailMapper.insert(coinAccountDetail);
			if (result2 == 1) {
				logger.info("金币明细表coin_account_detail insert success");
			} else {
				logger.info("金币明细表coin_account_detail insert failure");
			}
		}

		if (expValue != null) {
			// 经验值明细
			ExpAccountDetail expAccountDetail = new ExpAccountDetail();
			expAccountDetail.setAccountCode(accountCode);
			expAccountDetail.setActionCode(actionCode);
			expAccountDetail.setCurrentValue(expValue.intValue());
			// 本次增减前经验值
			Integer expFormerBalance = expAccountDetailMapper.selectBalance(expAccountDetail);
			// 本次增减前经验值
			Integer expCurrentBalance = (expFormerBalance == null ? 0 : expFormerBalance) + expValue;
			expAccountDetail.setCurrentBalance(expCurrentBalance);
			expAccountDetail.setCreateTime(System.currentTimeMillis());

			int result3 = expAccountDetailMapper.insert(expAccountDetail);
			if (result3 == 1) {
				logger.info("经验值明细表exp_account_detail insert success");
			} else {
				logger.info("经验值明细表exp_account_detail insert failure");
			}
		}
	}

	/**
	 * @Title: integralAccount @Description:
	 *         积分账户表、金币账户表、经验值账户表插入与修改数据 @param @param accountCode @param @param
	 *         accountType @param @param integralValue 参数 @return void
	 *         返回类型 @throws
	 */
	private void integralAccount(String accountCode, Byte accountType, Byte integralValue, Byte coinValue,
			Byte expValue, String manageOrgCode) {
		// 若查到的积分值不为null，则维护积分账户表
		if (integralValue != null) {
			// 第一次插入数据到表integral_account与修改数据的pojo
			IntegralAccount integralAccount = new IntegralAccount();
			integralAccount.setAccountCode(accountCode);
			integralAccount.setAccountType(accountType);
			integralAccount.setIntegralBalance(integralValue.intValue());
			integralAccount.setOrgCode(manageOrgCode);
			// 积分余额校验盐值 TODO
			// integralAccount.setIntegralBalanceSalt(integralBalanceSalt);
			// 创建时间，添加账户时设置；修改账户时sql不会设置
			Long createTime = System.currentTimeMillis();
			// 修改时间，添加和修改账户时设置
			Long modifyTime = createTime;
			integralAccount.setCreateTime(createTime);
			integralAccount.setModifyTime(modifyTime);

			// 根据账户编号获取当前积分账户
			IntegralAccount integralAccountFetch = integralAccountMapper.selectByAccountCode(accountCode);

			if (integralAccountFetch == null) {
				// 添加积分账户
				int result = integralAccountMapper.insert(integralAccount);
				if (result == 1) {
					logger.info("积分账户表integral_account insert success");
				} else {
					logger.info("积分账户表integral_account insert failure");
				}
			} else {
				// 当前积分余额
				int currentBalance = integralAccountFetch.getIntegralBalance() == null ? 0
						: integralAccountFetch.getIntegralBalance();
				// 若将要变更至的积分余额
				int integralBanlance = currentBalance + integralAccount.getIntegralBalance();

				// 若将要变更至的积分余额与当前积分余额不同，则修改积分账户
				if (integralBanlance != currentBalance) {
					// 设置将要变更至的积分余额
					integralAccount.setIntegralBalance(integralBanlance);
					// 积分余额校验盐值 TODO
					// integralAccount.setIntegralBalanceSalt(integralBalanceSalt);

					// 修改积分账户
					int result = integralAccountMapper.updateByAccountCode(integralAccount);
					if (result == 1) {
						logger.info("积分账户表integral_account update success");
					} else {
						logger.info("积分账户表integral_account update failure");
					}
				}
			}
		}

		// 若查到的金币值不为null，则维护金币账户表
		if (coinValue != null) {
			// 第一次插入数据到表coin_account与修改数据的pojo
			CoinAccount coinAccount = new CoinAccount();
			coinAccount.setAccountCode(accountCode);
			coinAccount.setAccountType(accountType);
			coinAccount.setCoinBalance(coinValue.intValue());
			// 金币余额校验盐值 TODO
			// coinAccount.setCoinBalanceSalt(coinBalanceSalt);
			coinAccount.setOrgCode(manageOrgCode);
			// 创建时间，添加账户时设置；修改账户时sql不会设置
			Long createTime2 = System.currentTimeMillis();
			// 修改时间，添加和修改账户时设置
			Long modifyTime2 = createTime2;
			coinAccount.setCreateTime(createTime2);
			coinAccount.setModifyTime(modifyTime2);

			// 根据账户编号获取当前金币账户
			CoinAccount coinAccountFetch = coinAccountMapper.selectByAccountCode(accountCode);

			if (coinAccountFetch == null) {
				// 添加金币账户
				int result = coinAccountMapper.insert(coinAccount);
				if (result == 1) {
					logger.info("金币账户表coin_account insert success");
				} else {
					logger.info("金币账户表coin_account insert failure");
				}
			} else {
				// 当前金币余额
				int currentBalance = coinAccountFetch.getCoinBalance() == null ? 0 : coinAccountFetch.getCoinBalance();
				// 将要变更至的金币余额
				int coinBalance = currentBalance + coinAccount.getCoinBalance();

				// 若将要变更至的金币余额与当前金币余额不同，则修改金币账户
				if (coinBalance != currentBalance) {
					// 设置将要变更至的金币余额
					coinAccount.setCoinBalance(coinBalance);
					// 金币余额校验盐值 TODO
					// coinAccount.setCoinBalanceSalt(coinBalanceSalt);

					// 修改金币账户
					int result = coinAccountMapper.updateByAccountCode(coinAccount);
					if (result == 1) {
						logger.info("金币账户表coin_account update success");
					} else {
						logger.info("金币账户表coin_account update failure");
					}
				}
			}
		}

		// 若查到的经验值值不为null，则维护经验值账户表
		if (expValue != null) {
			// 第一次插入数据到表exp_account与修改数据的pojo
			ExpAccount expAccount = new ExpAccount();
			expAccount.setAccountCode(accountCode);
			expAccount.setCurrentExp(expValue.intValue());
			expAccount.setOrgCode(manageOrgCode);
			// 创建时间，添加账户时设置；修改账户时sql不会设置
			Long createTime3 = System.currentTimeMillis();
			// 修改时间，添加和修改账户时设置
			Long modifyTime3 = createTime3;
			expAccount.setCreateTime(createTime3);
			expAccount.setModifyTime(modifyTime3);

			// 根据账户编号获取当前经验值账户
			ExpAccount expAccountFetch = expAccountMapper.selectByAccountCode(accountCode);

			if (expAccountFetch == null) {
				// 最小等级
				Byte minLevelNo = userLevelConfigMapper.selectMinLevelNo();
				// 添加用户时默认设置为最小等级
				if (minLevelNo != null) {
					expAccount.setCurrentLevel(minLevelNo.intValue());
				}
				// 添加经验值账户
				int result = expAccountMapper.insert(expAccount);
				if (result == 1) {
					logger.info("经验值账户表exp_account insert success");
				} else {
					logger.info("经验值账户表exp_account insert failure");
				}
			} else {
				// 当前经验值余额
				int currentBalance = expAccountFetch.getCurrentExp() == null ? 0 : expAccountFetch.getCurrentExp();
				// 将要变更至的经验值余额
				int currentExp = currentBalance + expAccount.getCurrentExp();
				// 若将要变更至的经验值余额与当前经验值余额不同，则修改经验值账户
				if (currentExp != currentBalance) {
					// 设置经验值余额
					expAccount.setCurrentExp(currentExp);
					// 获取用户当前等级
					Integer currentLevel = expAccountFetch.getCurrentLevel();
					// 根据等级升序查询经验值等级配置列表
					List<UserLevelConfig> userLevelConfigList = userLevelConfigMapper.selectAll();
					// 获取最高等级配置信息
					UserLevelConfig maxLevelConfig = userLevelConfigMapper.selectMaxLevelConfig();
					// 获取最高等级配置的起始经验值
					Integer maxExpValueStart = maxLevelConfig.getExpValueStart();
					
					// 遍历经验值等级配置列表，若用户当前经验值在起始经验值与升级经验值之间，并且用户当前等级小于该条记录的等级，将用户等级设置为该条记录的等级
					for (UserLevelConfig userLevelConfig : userLevelConfigList) {
						// 获取起始经验值
						Integer expValueStart = userLevelConfig.getExpValueStart();
						// 获取升级经验值
						Integer expValueEnd = userLevelConfig.getExpValue();
						// 获取相应的等级
						Integer level = (int) userLevelConfig.getLevelNo();
						
						/*
						 * 1.if---用户当前经验值大于等于最高等级对应的起始经验值，则将用户等级设置为最高等级
						 * 2.else if---用户当前经验值在起始经验值与升级经验值之间
						 */
						if (currentExp >= maxExpValueStart) {
							expAccount.setCurrentLevel((int)maxLevelConfig.getLevelNo());
							break;
						}else if(currentExp >= expValueStart && currentExp <= expValueEnd) {
							// 若用户当前等级不等于该条记录的等级，则将用户等级设置为该条记录的等级
							if (currentLevel != level) {
								expAccount.setCurrentLevel(level);
							}
							break;
						}
					}

					// 修改经验值账户
					int result = expAccountMapper.updateByAccountCode(expAccount);
					if (result == 1) {
						logger.info("经验值账户表exp_account update success");
					} else {
						logger.info("经验值账户表exp_account update failure");
					}
				}
			}
		}
	}

}

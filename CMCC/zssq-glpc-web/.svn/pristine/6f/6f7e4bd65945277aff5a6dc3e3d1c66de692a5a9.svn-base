package com.zssq.news.controller;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.zssq.annotation.RequireValid;
import com.zssq.constants.NewsConstants;
import com.zssq.dao.pojo.SysOrgInfo;
import com.zssq.dao.pojo.SysUserInfo;
import com.zssq.dao.pojo.UserInfoByName;
import com.zssq.exceptions.BusinessException;
import com.zssq.news.dao.pojo.NewsArchive;
import com.zssq.news.dao.pojo.NewsInfoContent;
import com.zssq.news.dao.pojo.NewsReply;
import com.zssq.news.model.NewsArchiveModel;
import com.zssq.news.model.NewsArchiveQuery;
import com.zssq.news.model.NewsCommentModel;
import com.zssq.news.model.NewsModel;
import com.zssq.news.newsvo.NewsArchiveListVO;
import com.zssq.news.newsvo.NewsArchiveVO;
import com.zssq.news.service.NewsArchiveService;
import com.zssq.pojo.ResultJSON;
import com.zssq.service.ISysOrgService;
import com.zssq.service.ISysUserService;
import com.zssq.shiro.mysecurity.UUIDHelper;
import com.zssq.utils.DateUtils;
import com.zssq.utils.PageBean;
import com.zssq.utils.PageParam;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/**
 * @author SharlaCheung
 * @ClassName: NewsCommentController
 * @Description: 新闻Controller
 * @date 2017年4月13日
 */
@Controller
@RequestMapping("/newsarchive")
public class NewsArchiveController {
    private Logger log = Logger.getLogger(this.getClass());

    @Autowired
    private NewsArchiveService newsArchiveService;

    @Autowired
    private ISysUserService sysUserService;

    @Autowired
    private ISysOrgService sysOrgService;

    private List<String> usercodes;
    private List<String> orgcodes;

    /**
     * @param newsArchiveListVO
     * @return 参数
     * @throws BusinessException
     * @Title: getNewsArchives
     * @Description: 新闻查询列表
     * @return: ResultJSON    返回类型
     */

    @RequestMapping("/getNewsArchives")
    @ResponseBody
    public ResultJSON getNewsArchives(@RequireValid NewsArchiveListVO newsArchiveListVO) throws BusinessException {
        NewsArchiveQuery newsArchiveQuery = new NewsArchiveQuery();
        ResultJSON resJson = null;
        JSONObject json = null;
        JSONArray jsonArray = new JSONArray();
        JSONObject body = new JSONObject();
        try {
            PageParam pageParam = new PageParam(0, 10);
            List<UserInfoByName> sysUsers = sysUserService.selectUserByUserName(newsArchiveListVO.getUserName(), pageParam);

            String userCodes = generateUserCodes(sysUsers);

            newsArchiveQuery.setUserCode(userCodes);
            newsArchiveQuery.setPageNo(Integer.valueOf(newsArchiveListVO.getPageNo()));
            newsArchiveQuery.setPageSize(Integer.valueOf(newsArchiveListVO.getPageSize()));
            newsArchiveQuery.setLimitStart(newsArchiveQuery.getPageNo() * newsArchiveQuery.getPageSize());
            newsArchiveQuery.setArchiveTitle(newsArchiveListVO.getArchiveTitle());
            newsArchiveQuery.setOrgCode(newsArchiveListVO.getOrgCode());
            newsArchiveQuery.setIsDelete(NewsConstants.NEWS_NO_DELETE);
            newsArchiveQuery.setIsShield(NewsConstants.NEWS_NO_SHIELD);

            if (null != newsArchiveListVO.getArchiveTitle() && !"".equals(newsArchiveListVO.getArchiveTitle())) {
                newsArchiveQuery.setArchiveTitle(newsArchiveListVO.getArchiveTitle());
            }
            if (null != newsArchiveListVO.getStartTime() && !"".equals(newsArchiveListVO.getStartTime())) {
                newsArchiveQuery.setStartTime(Long.valueOf(newsArchiveListVO.getStartTime()));
            }
            if (null != newsArchiveListVO.getEndTime() && !"".equals(newsArchiveListVO.getEndTime())) {
                newsArchiveQuery.setEndTime(Long.valueOf(newsArchiveListVO.getEndTime()));
            }
            //查询条件
            PageBean pageBean = newsArchiveService.getNewsArchives(newsArchiveQuery);
            //返回值封装
            List<NewsArchive> list = pageBean.getRecordList();
            //根据用户code列表获取用户集合
            if (list.size() > 0) {
                List<String> usercodes = new ArrayList<>();
                List<String> orgcodes = new ArrayList<>();
                for (NewsArchive newsArchive : list) {
                    usercodes.add(newsArchive.getCreatorCode());
                    orgcodes.add(newsArchive.getOrgCode());
                }
                List<SysUserInfo> userInfos = sysUserService.selectByCodes(usercodes);
                Map<String, SysUserInfo> userMap = generateUserInfoMap(userInfos);

                List<SysOrgInfo> sysOrgInfos = sysOrgService.selectByCodes(orgcodes);
                Map<String, SysOrgInfo> orgMap = generateOrgInfoMap(sysOrgInfos);
                for (int i = 0; i < list.size(); i++) {
                    json = new JSONObject();
                    NewsArchive temp = list.get(i);
                    json.put("archiveCode", temp.getArchiveCode());
                    json.put("archiveTitle", temp.getArchiveTitle());
                    json.put("archiveName", temp.getArchiveName());
                    json.put("archiveUrl", temp.getArchiveUrl());
                    json.put("createTime", temp.getCreateTime());
                    json.put("modifyTime", temp.getModifyTime());
                    json.put("creatorCode", temp.getCreatorCode());
                    SysUserInfo userInfo = userMap.get(temp.getCreatorCode());
                    json.put("infoOperatorName", userInfo == null ? "" : userInfo.getUserName());
                    json.put("orgCode", temp.getOrgCode());
                    SysOrgInfo sysOrgInfo = orgMap.get(temp.getOrgCode());
                    json.put("orgName", sysOrgInfo == null ? "" : sysOrgInfo.getSysOrgName());
                    jsonArray.add(json);
                }
            }
            resJson = new ResultJSON("COMMON_200");
            body.put("totalCount", pageBean.getTotalCount());
            body.put("topTotal", pageBean.getNumPerPage());
            body.put("list", jsonArray);
            resJson.setBody(body);

            log.info("NewsArchiveController.page:获取新闻归档列表成功");
        } catch (BusinessException e) {
            throw e;
        } catch (Exception e) {
            throw BusinessException.build("NEWS_14002", "获取新闻归档列表");
        }
        return resJson;
    }


    /**
     * @param newsArchiveVO
     * @return 参数
     * @throws BusinessException
     * @Title: addNewsArchives
     * @Description: 新闻新增
     * @return: ResultJSON    返回类型
     */
    @RequestMapping("/addNewsArchives")
    @ResponseBody
    public ResultJSON addNewsArchives(@RequireValid NewsArchiveVO newsArchiveVO) throws BusinessException {
        NewsModel newsModel = null;
        ResultJSON resJson = null;
        JSONObject body = new JSONObject();
        try {
            List<NewsInfoContent> list = newsArchiveService.generateNewsData(newsArchiveVO.getNewsCodes());
            ResultJSON rj = createNewsArchives(newsArchiveVO, list);

            resJson = new ResultJSON("COMMON_200");
            resJson.setBody(rj);
            log.info("NewsCommentController.addNewsInfo:新闻归档成功");
        } catch (BusinessException e) {
            throw e;
        } catch (Exception e) {
            e.printStackTrace();
            throw BusinessException.build("NEWS_14002", "新闻归档");
        }
        return resJson;
    }

    /**
     * 创建
     *
     * @param newsArchiveVO
     * @param list
     * @return
     */
    private ResultJSON createNewsArchives(NewsArchiveVO newsArchiveVO, List<NewsInfoContent> list) throws BusinessException {
        try {
            //获取用户信息
            SysUserInfo sysUserInfo = sysUserService.selectByCode(newsArchiveVO.getUserCode());
            //生成数据
            ResultJSON resJson = generateJson(list);
//            String url = "";
//            //更改新闻状态为已归档
//           NewsArchiveModel newsArchiveModel =generateNewsArchiveModel(newsArchiveVO,url,sysUserInfo);
//            newsArchiveService.addNewsArchives(newsArchiveModel);
            return resJson;
        } catch (Exception e) {
            e.printStackTrace();
            throw BusinessException.build("NEWS_14002", "新闻归档");
        }
    }

    private ResultJSON generateJson(List<NewsInfoContent> list) throws BusinessException {
        ResultJSON resultJson = new ResultJSON();
        JSONObject json = null;
        JSONArray jsonArray = new JSONArray();
        try {
            if (list.size() > 0) {
                collectCodes(list);
                List<SysUserInfo> userInfos = sysUserService.selectByCodes(usercodes);
                Map<String, SysUserInfo> userMap = generateUserInfoMap(userInfos);
                List<SysOrgInfo> sysOrgInfos = sysOrgService.selectByCodes(orgcodes);
                Map<String, SysOrgInfo> orgMap = generateOrgInfoMap(sysOrgInfos);
                for (int i = 0; i < list.size(); i++) {
                    json = new JSONObject();
                    NewsInfoContent temp = list.get(i);
                    json.put("newsCode", temp.getNewsCode());
                    json.put("infoTitle", temp.getInfoTitle());
                    json.put("infoContentText", temp.getInfoContentText());
                    json.put("infoContentHtml", temp.getInfoContentHtml());
                    json.put("fileUrl", temp.getFileUrl());
                    json.put("infoStatus", temp.getInfoStatus());
                    json.put("infoOperatorCode", temp.getInfoOperatorCode());
                    SysUserInfo userInfo = userMap.get(temp.getInfoOperatorCode());
                    json.put("infoOperatorName", userInfo == null ? "" : userInfo.getUserName());
                    json.put("infoCreatorCode", temp.getInfoCreatorCode());
                    json.put("isTop", temp.getIsTop());
                    json.put("infoSort", temp.getInfoSort());
                    json.put("isHidden", temp.getIsHidden());
                    json.put("modifyTime", temp.getModifyTime());
                    json.put("publishTime", temp.getPublishTime());

                    List<NewsCommentModel> newsCommentModels = temp.getNewsCommentModels();
                    JSONArray jsoncommentArray = new JSONArray();
                    if (null != newsCommentModels && newsCommentModels.size() > 0) {
                        JSONObject jsonComment = null;
                        for (int index = 0; i < newsCommentModels.size(); index++) {
                            jsonComment = new JSONObject();
                            NewsCommentModel newsCommentModel = newsCommentModels.get(index);
                            jsonComment.put("id", newsCommentModel.getId());
                            jsonComment.put("infoCommentCode", newsCommentModel.getCommentCode());
                            jsonComment.put("newsCode", newsCommentModel.getNewsCode());
                            jsonComment.put("userCode", newsCommentModel.getUserCode());
                            SysUserInfo creator = userMap.get(newsCommentModel.getUserCode());
                            jsonComment.put("userName", creator == null ? "" : creator.getUserName());
                            jsonComment.put("headPortrait", creator == null ? "" : creator.getHeadPortrait());
                            jsonComment.put("orgCode", newsCommentModel.getOrgCode());
                            SysOrgInfo sysOrgnfo = orgMap.get(newsCommentModel.getOrgCode());
                            jsonComment.put("orgName", sysOrgnfo == null ? "" : sysOrgnfo.getSysOrgName());
                            jsonComment.put("commentContent", newsCommentModel.getCommentContent());
                            jsonComment.put("commentReplyNum", newsCommentModel.getCommentReplyNum());
                            jsonComment.put("commentGoodCount", newsCommentModel.getCommentLikeNum());
                            jsonComment.put("isPraise", newsCommentModel.getIsPraise());
                            jsonComment.put("createTime", newsCommentModel.getCreateTime());
                            jsonComment.put("modifyTime", newsCommentModel.getModifyTime());

                            List<NewsReply> newsReplies = newsCommentModel.getNewsReplyList();
                            JSONArray jsonReplyArray = new JSONArray();
                            if (null != newsReplies && newsReplies.size() > 0) {
                                JSONObject jsonReply = null;
                                for (int step = 0; i < newsReplies.size(); step++) {
                                    jsonReply = new JSONObject();
                                    NewsReply newsReply = newsReplies.get(step);
                                    jsonReply.put("replyCode", newsReply.getReplyCode());
                                    jsonReply.put("userCode", newsReply.getUserCode());
                                    jsonReply.put("replyContent", newsReply.getReplyContent());
                                    SysUserInfo replyUser = userMap.get(newsReply.getUserCode());
                                    jsonReply.put("userName", replyUser == null ? "" : replyUser.getUserName());
                                    jsonReply.put("headPortrait", replyUser == null ? "" : replyUser.getHeadPortrait());
                                    jsonReply.put("orgCode", newsReply.getOrgCode());
                                    SysOrgInfo sysOrginfo = orgMap.get(newsReply.getOrgCode());
                                    jsonReply.put("orgName", sysOrginfo == null ? "" : sysOrginfo.getSysOrgName());

                                    jsonReply.put("revertPeopleCode", newsReply.getToReplyUserCode());
                                    SysUserInfo revertUserInfo = userMap.get(newsReply.getToReplyUserCode());
                                    jsonReply.put("revertPeopleName", revertUserInfo == null ? "" : revertUserInfo.getUserName());
                                    jsonReply.put("revertHeadPortrait", revertUserInfo == null ? "" : revertUserInfo.getHeadPortrait());
                                    jsonReply.put("revertOrgCode", newsReply.getToReplyOrgCode());
                                    SysOrgInfo sysOrginforevert = orgMap.get(newsReply.getOrgCode());
                                    jsonReply.put("revertOrgName", sysOrginforevert == null ? "" : sysOrginforevert.getSysOrgName());
                                    jsonReply.put("replyLikeNum", newsReply.getReplyLikeNum());
                                    jsonReply.put("isPraise", newsReply.getIsPraise());
                                    jsonReply.put("replyReplyNum", newsReply.getReplyReportNum());
                                    jsonReply.put("createTime", newsReply.getCreateTime());
                                    jsonReply.put("modifyTime", newsReply.getModifyTime());
                                    jsonReplyArray.add(jsonReply);
                                }
                            }
                            jsonComment.put("jsonReplyArray", jsonReplyArray);
                            jsoncommentArray.add(jsonComment);
                        }
                    }
                    json.put("jsoncommentArray", jsoncommentArray);
                    jsonArray.add(json);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw BusinessException.build("NEWS_14002", "新闻归档");
        }
        return resultJson;
    }

    private void collectCodes(List<NewsInfoContent> list) {
        usercodes = new ArrayList<>();
        orgcodes = new ArrayList<>();
        Set<String> userSet = new HashSet<>();
        Set<String> orgSet = new HashSet<>();
        for (NewsInfoContent newsInfoContent : list) {
            userSet.add(newsInfoContent.getInfoOperatorCode());
            userSet.add(newsInfoContent.getInfoOperatorCode());
            orgSet.add(newsInfoContent.getOrgCode());
            List<NewsCommentModel> newsCommentList = newsInfoContent.getNewsCommentModels();
            if (null != newsCommentList && newsCommentList.size() > 0) {
                for (NewsCommentModel newsCommentModel : newsCommentList) {
                    userSet.add(newsCommentModel.getUserCode());
                    userSet.add(newsCommentModel.getRevertPeopleCode());
                    orgSet.add(newsCommentModel.getOrgCode());
                    List<NewsReply> newsReplies = newsCommentModel.getNewsReplyList();
                    if (null != newsReplies && newsReplies.size() > 0) {
                        for (NewsReply newsReply : newsReplies) {
                            userSet.add(newsReply.getUserCode());
                            userSet.add(newsReply.getToReplyUserCode());
                            orgSet.add(newsReply.getOrgCode());
                            orgSet.add(newsReply.getToReplyOrgCode());
                        }
                    }

                }
            }
        }
        for (String userCode : userSet) {
            usercodes.add(userCode);
        }
        for (String orgCode : orgSet) {
            orgcodes.add(orgCode);
        }
    }

    /**
     * 一次性压缩多个文件，文件存放至一个文件夹中
     */
    public static void ZipMultiFile(String filepath, String zippath) {
        try {
            File file = new File(filepath);// 要被压缩的文件夹
            File zipFile = new File(zippath);
            InputStream input = null;
            ZipOutputStream zipOut = new ZipOutputStream(new FileOutputStream(zipFile));
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; ++i) {
                    input = new FileInputStream(files[i]);
                    zipOut.putNextEntry(new ZipEntry(file.getName() + File.separator + files[i].getName()));
                    int temp = 0;
                    while ((temp = input.read()) != -1) {
                        zipOut.write(temp);
                    }
                    input.close();
                }
            }
            zipOut.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private NewsArchiveModel generateNewsArchiveModel(NewsArchiveVO newsArchiveVO, String url, SysUserInfo sysUserInfo) {
        NewsArchiveModel newsArchiveModel = new NewsArchiveModel();
        long currentTime = System.currentTimeMillis();
        newsArchiveModel.setArchiveTitle(DateUtils.getReqDate());
        newsArchiveModel.setArchiveCode(UUIDHelper.getUUID());
        newsArchiveModel.setArchiveName(DateUtils.getReqDate());
        newsArchiveModel.setArchiveUrl(url);
        newsArchiveModel.setCreateTime(currentTime);
        newsArchiveModel.setModifyTime(currentTime);
        newsArchiveModel.setCreatorCode(newsArchiveVO.getUserCode());
        newsArchiveModel.setOrgCode(sysUserInfo.getManageOrgInfo().getManOrgCode());
        newsArchiveModel.setNewsCodes(newsArchiveVO.getNewsCodes());
        newsArchiveModel.setIsDelete(0);
        newsArchiveModel.setIsShield(0);
        newsArchiveModel.setTenantCode(sysUserInfo.getTenantCode());
        return newsArchiveModel;
    }

    private Map<String, SysUserInfo> generateUserInfoMap(List<SysUserInfo> userInfos) {
        Map<String, SysUserInfo> users = new HashMap<String, SysUserInfo>();
        for (SysUserInfo sysUserInfo : userInfos) {
            if (null != sysUserInfo) {
                users.put(sysUserInfo.getUserCode(), sysUserInfo);
            }
        }
        return users;
    }

    private Map<String, SysOrgInfo> generateOrgInfoMap(List<SysOrgInfo> sysOrgInfos) {
        Map<String, SysOrgInfo> orgInfos = new HashMap<String, SysOrgInfo>();
        for (SysOrgInfo sysOrgInfo : sysOrgInfos) {
            orgInfos.put(sysOrgInfo.getManOrgCode(), sysOrgInfo);
        }
        return orgInfos;
    }

    private String generateUserCodes(List<UserInfoByName> sysUsers) {
        String userCodes = "";
        for (UserInfoByName userInfoByName : sysUsers) {
            if (null != userInfoByName) {
                userCodes = userCodes + userInfoByName.getUserCode() + ",";
            }
        }
        if (userCodes.length() > 0) {
            userCodes = userCodes.substring(0, userCodes.length() - 1);
        }
        return userCodes;
    }

}
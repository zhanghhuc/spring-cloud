package com.zssq.team.controller;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.CharsetUtils;
import org.apache.http.util.EntityUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.zssq.annotation.RequireValid;
import com.zssq.config.AuthConfig;
import com.zssq.constants.AuthConstants;
import com.zssq.constants.TeamConstants;
import com.zssq.dao.pojo.CoinAccount;
import com.zssq.dao.pojo.IntegralAccount;
import com.zssq.dao.pojo.IntegralAndCoin;
import com.zssq.dao.pojo.MyCount;
import com.zssq.dao.pojo.RankEntity;
import com.zssq.dao.pojo.StatisticVisitDetail;
import com.zssq.dao.pojo.SysOrgInfo;
import com.zssq.dao.pojo.SysUserInfo;
import com.zssq.dao.pojo.TeamFans;
import com.zssq.dao.pojo.TeamFriend;
import com.zssq.dao.pojo.TeamInfo;
import com.zssq.dao.pojo.TeamMember;
import com.zssq.dao.pojo.TeamMessage;
import com.zssq.dao.pojo.TeamMessageReply;
import com.zssq.dao.pojo.UserLevelConfig;
import com.zssq.exceptions.BusinessException;
import com.zssq.fastdfs.config.FastDfsConf;
import com.zssq.pojo.Message;
import com.zssq.pojo.ResultJSON;
import com.zssq.service.HonorThirdService;
import com.zssq.service.ICoinAccountService;
import com.zssq.service.IExpAccountService;
import com.zssq.service.IIntegralAccountService;
import com.zssq.service.IStatisticService;
import com.zssq.service.ISysOrgService;
import com.zssq.service.ISysUserService;
import com.zssq.service.ITeamInfoService;
import com.zssq.service.ITeamMemberService;
import com.zssq.service.IUserRelationService;
import com.zssq.team.utils.FileUtil;
import com.zssq.team.vo.TeamArchivesVo;
import com.zssq.utils.DateUtils;
import com.zssq.utils.PageBean;
import com.zssq.utils.PropertiesUtil;
import com.zssq.utils.StringTools;
import com.zssq.utils.file.FileHandler;
import com.zssq.utils.zip.ZipUtil;

@Controller
@RequestMapping("/teamRecord")
public class TeamRecordController {

	private Logger log = Logger.getLogger(this.getClass());

	/** 班组基本信息service */
	@Autowired
	private ITeamInfoService teamInfoService;

	/** 班组成员信息service */
	@Autowired
	private ITeamMemberService teamMemberService;

	/** 组织机构service */
	@Autowired
	private ISysOrgService sysOrgService;

	/** 用户service */
	@Autowired
	private ISysUserService sysUserService;

	/** 积分service */
	@Autowired
	private IIntegralAccountService integralAccountService;

	/** 金币service */
	@Autowired
	private ICoinAccountService coinAccountService;

	/** fastDfs配置 */
	@Autowired
	private FastDfsConf fastDfsConf;

	/** 经验服务 */
	@Autowired
	private IExpAccountService expAccountService;

	/** 好友关系service */
	@Autowired
	private IUserRelationService userRelationService;

	/** 获取配置的默认头像 */
	@Autowired
	private AuthConfig authConfig;

	/** 调用荣誉service */
	@Autowired
	private HonorThirdService honorThirdService;

	/** 获取访问量service */
	@Autowired
	private IStatisticService statisticService;

	/**
	 * @Function addTeamArchives
	 * @Description 班组归档
	 * @param param
	 * @return
	 * @throws BusinessException
	 */
	@ResponseBody
	@RequestMapping("/addTeamArchives")
	public ResultJSON addTeamArchives(@RequireValid TeamArchivesVo param, HttpServletRequest request, HttpServletResponse response) throws BusinessException {
		Message m = null;
		ResultJSON rj = new ResultJSON();
		String teamCode = param.getTeamCode();
		File file = null;
		String archivesFile = "";
		try {
			TeamInfo teamInfo = teamInfoService.selectByCode(param.getTeamCode());
			if (teamInfo == null) {
				rj.setBody(new JSONObject());
				m = PropertiesUtil.getMessage(TeamConstants.RETURNCODE_TEAM_15002);
				rj.setReturnCode(m.getCode());
				rj.setReturnTip("班组编码无效");
				return rj;
			}
			if (teamInfo.getIsRecord().equals(TeamConstants.ARCHIVING)) {// 归档中...
				rj.setBody(new JSONObject());
				m = PropertiesUtil.getMessage(TeamConstants.RETURNCODE_TEAM_15002);
				rj.setReturnCode(m.getCode());
				rj.setReturnTip( "班组正在归档...");
				return rj;
			} else if (teamInfo.getIsRecord().equals(TeamConstants.BOOLEAN_TRUE)) {// 已归档....
				rj.setBody(new JSONObject());
				m = PropertiesUtil.getMessage(TeamConstants.RETURNCODE_TEAM_15002);
				rj.setReturnCode(m.getCode());
				rj.setReturnTip("班组已归档");
				return rj;
			} else {// 变更标志,归档中,标志2
				teamInfoService.teamArchiving(teamCode, TeamConstants.ARCHIVING);
			}
//			String indexFile = "\\opt\\archive\\team\\template\\";
			String indexFile = fastDfsConf.getTeamTemplate();//初始化模板路径
//			archivesFile = "\\opt\\archive\\team\\archiveFile\\";
			archivesFile = fastDfsConf.getTeamArchive();// 资源文件(中转)路径
			String teamFile = archivesFile + teamCode + "\\";//指定文件夹  班组编码
			String teamZip = archivesFile + teamCode + ".zip";//压缩包路径
			file = new File(teamZip);
			if (file.exists()) {// 存在删除压缩包
				file.delete();
			}
			file = new File(teamFile);
			if (file.exists()) {// 存在删除
				FileUtil.deleteDir(file);
			}
			FileUtil.copyFolder(indexFile, teamFile);//复制模板
			
//			String staPath =  teamFile + "sta_files\\";//静态资源存放路径,图片/音视频
			String dataPath = teamFile + "data\\";//.js存放目录
			
			// 1.班组信息归档
			String teamInfoData = this.teamInfoData(teamInfo);
			FileHandler.createFile(dataPath, "teamInfoData", ".js", teamInfoData);

			// 2.班组成员信息归档
			String teamMemberData = this.teamMemberData(teamCode);
			FileHandler.createFile(dataPath, "teamMemberData", ".js", teamMemberData);

			// 3.班组粉丝
			String teamFansData = this.teamFansData(teamCode);
			FileHandler.createFile(dataPath, "teamFansData", ".js", teamFansData);

			// 4.友好班组
			String teamFriendsData = this.teamFriendsData(teamCode);
			FileHandler.createFile(dataPath, "teamFriendsData", ".js", teamFriendsData);

			// 5.班组访客
			String teamVisitorsData = this.teamVisitorsData(teamCode);
			FileHandler.createFile(dataPath, "teamVisitorsData", ".js", teamVisitorsData);

			// 6.班组留言
			String teamMessagesData = this.teamMessagesData(teamCode);
			FileHandler.createFile(dataPath, "teamMessagesData", ".js", teamMessagesData);

			// 7.班组成员贡献排行榜
			String memberDevoteData = this.memberDevoteData(teamCode);
			FileHandler.createFile(dataPath, "memberDevoteData", ".js", memberDevoteData);

			// 打包，上传到文件服务器
			ZipUtil.zip(teamFile ,archivesFile , teamCode + ".zip");
			String result = upload(archivesFile + teamCode + ".zip", request, response);
			String url = urlAnalysis(result);

			// 最后变更标识,填写url,删除压缩包
			FileUtil.deleteDir(file);//删除班组文件夹
			FileHandler.delFile(archivesFile, teamCode, ".zip");//删除班组压缩包
			
			teamInfoService.teamArchive(param.getTeamCode(), url, param.getUserCode());// 变更数据库
			
			rj = new ResultJSON("COMMON_200");
			JSONObject body = new JSONObject();
			body.put("url", url);
			rj.setBody(body);
			log.info("班组归档成功");
		} catch (Exception e) {
			//删除文件
			if(file != null){
				FileUtil.deleteDir(file);//删除班组文件夹
				FileHandler.delFile(archivesFile, teamCode, ".zip");//删除班组压缩包
			}
			// 归档失败,归档标志2-->0
			teamInfoService.teamArchiving(teamCode, TeamConstants.BOOLEAN_FALSE);
			m = PropertiesUtil.getMessage(TeamConstants.RETURNCODE_TEAM_15002);
			log.error("班组归档", e);
			throw new BusinessException(m.getCode(), String.format(m.getTip(), "班组归档"));
		}
		return rj;
	}

	/**
	 * @Function teamInfoDate
	 * @Description 班组归档
	 * @param teamInfo
	 *            班组信息对象
	 * @param filePath
	 *            班组头像存放路径
	 * @return
	 * @throws Exception
	 */
	private String teamInfoData(TeamInfo teamInfo) throws Exception {
		try {
//			String teamIcon = this.downloadResource(teamInfo.getTeamIcon(), filePath);
			// 拼接班组信息
			JSONObject teamInfoJson = new JSONObject();
			if(StringTools.isEmpty(teamInfo.getTeamIcon())){
				teamInfoJson.put("teamIcon", authConfig.getTeamIcon());// 头像
			}else{
				teamInfoJson.put("teamIcon", StringTools.formatToString(teamInfo.getTeamIcon()));// 头像
			}
			teamInfoJson.put("teamName", StringTools.formatToString(teamInfo.getTeamName()));// 名称
			if (teamInfo.getTeamType().equals(TeamConstants.TEAM_TYPE_1)) {
				teamInfoJson.put("teamType", TeamConstants.TEAM_TYPE_NAME_1);// 类型
			} else {
				teamInfoJson.put("teamType", TeamConstants.TEAM_TYPE_NAME_0);
			}
			CoinAccount coinAccount = coinAccountService.selectByAccountCode(teamInfo.getTeamCode());
			if (coinAccount != null) {
				teamInfoJson.put("gold", StringTools.formatToString(coinAccount.getCoinBalance()));// 金币
			} else {
				teamInfoJson.put("gold", "0");// 金币
			}
			IntegralAccount integralAccount = integralAccountService.selectByAccountCode(teamInfo.getTeamCode());
			if (integralAccount != null) {
				teamInfoJson.put("score", StringTools.formatToString(integralAccount.getIntegralBalance()));// 积分
			} else {
				teamInfoJson.put("score", "0");// 积分
			}
			SysOrgInfo orgInfo = sysOrgService.selectByCode(teamInfo.getOrgCode());
			if (orgInfo != null) {
				teamInfoJson.put("orgName", StringTools.formatToString(orgInfo.getSysOrgFullname()));// 组织机构名称
			} else {
				teamInfoJson.put("orgName", "");
			}
			teamInfoJson.put("intro", StringTools.formatToString(teamInfo.getTeamIntro()));// 班组简介
			String teamInfoData = "var data = " + teamInfoJson.toString();
			return teamInfoData;
		} catch (Exception e) {
			log.error("班组归档", e);
			throw e;
		}
	}

	/**
	 * @Function teamMemberDate
	 * @Description 班组成员归档
	 * @param teamCode
	 *            班组编码
	 * @param filePath
	 *            班组成员头像存放路径
	 * @return
	 * @throws Exception
	 */
	private String teamMemberData(String teamCode) throws Exception {
		try {
			TeamMember memberRecord = new TeamMember();
			memberRecord.setTeamCode(teamCode);
			PageBean memberPageBean = teamMemberService.getTeamMemList(null, memberRecord);
			List<TeamMember> teamMemberList = memberPageBean.getRecordList();
			JSONArray memberArray = new JSONArray();
			for (int i = 0; i < teamMemberList.size(); i++) {
				JSONObject memberJson = new JSONObject();
				TeamMember teamMember = teamMemberList.get(i);
				SysUserInfo userInfo = sysUserService.selectByCode(teamMember.getUserCode());
				if (userInfo != null) {
					if(StringTools.isEmpty(userInfo.getHeadPortrait())){
						memberJson.put("userHead", authConfig.getUserHead());// 头像
					}else{
						memberJson.put("userHead", StringTools.formatToString(userInfo.getHeadPortrait()));// 头像
					}
//					String userHead = this.downloadResource(userInfo.getHeadPortrait(), filePath);
//					memberJson.put("userHead", userHead);
					memberJson.put("userName", userInfo.getUserName());
					SysOrgInfo orgInfo = userInfo.getManageOrgInfo();
					if (orgInfo != null) {
						memberJson.put("orgName", orgInfo.getSysOrgFullname());
					} else {
						memberJson.put("orgName", "");
					}
					UserLevelConfig userLevelConfig = expAccountService.selectMultiByCode(teamMember.getUserCode());
					if (userLevelConfig != null) {
						memberJson.put("level", StringTools.formatToString(userLevelConfig.getLevelNo()));// 等级
						memberJson.put("title", StringTools.formatToString(userLevelConfig.getLevelTitle()));// 称号
					} else {
						memberJson.put("level", "1");
						memberJson.put("title", "儒生");
					}
				} else {
					memberJson.put("userHead", "");
					memberJson.put("userName", "");
					memberJson.put("orgName", "");
					memberJson.put("level", "");
					memberJson.put("title", "");
				}
				if (teamMember.getIsLeader().equals(TeamConstants.BOOLEAN_1)) {
					memberJson.put("isLeader", TeamConstants.IS_LEADER_TITLE_1);
				} else {
					memberJson.put("isLeader", TeamConstants.IS_LEADER_TITLE_0);
				}
				memberArray.add(memberJson);
			}
			String teamMemberData = "var data = " + memberArray.toString();
			return teamMemberData;
		} catch (Exception e) {
			log.error("班组归档", e);
			throw e;
		}
	}

	/**
	 * @Function teamFansData
	 * @Description 班组粉丝归档
	 * @param teamCode
	 *            班组编码
	 * @param filePath
	 *            粉丝头像存放路径
	 * @return
	 * @throws Exception
	 */
	private String teamFansData(String teamCode) throws Exception {
		try {
			PageBean pageBean = teamInfoService.selectFans(null, teamCode);
			List<TeamFans> fans = pageBean.getRecordList();
			JSONArray jsonArray = new JSONArray();
			for (int i = 0; i < fans.size(); i++) {
				JSONObject info = new JSONObject();
				TeamFans teamFans = fans.get(i);
				SysUserInfo userInfo = sysUserService.selectByCode(teamFans.getUserCode());// 查询用户
				if (userInfo != null) {
					info.put("userName", StringTools.formatToString(userInfo.getUserName()));// 粉丝名称
					if(StringTools.isEmpty(userInfo.getHeadPortrait())){
						info.put("userHead", authConfig.getUserHead());// 头像
					}else{
						info.put("userHead", StringTools.formatToString(userInfo.getHeadPortrait()));// 头像
					}
//					String userHead = this.downloadResource(userInfo.getHeadPortrait(), filePath);
//					info.put("userHead", userHead);
					SysOrgInfo sysOrgInfo = sysOrgService.selectByCode(userInfo.getOrgCode());
					if (sysOrgInfo != null) {
						info.put("orgName", StringTools.formatToString(sysOrgInfo.getSysOrgFullname()));// 组织机构名称
					} else {
						info.put("orgName", "");
					}
					MyCount myCount = userRelationService.selectMyCount(teamFans.getUserCode());
					info.put("concernsCount", StringTools.formatToString(myCount.getConcernsCount()));// 关注数量
					info.put("friendsCount", StringTools.formatToString(myCount.getFriendsCount()));// 好友数量
					info.put("fansCount", StringTools.formatToString(myCount.getFansCount()));// 粉丝数量
				} else {
					info.put("userName", "");
					info.put("head", "");
					info.put("orgName", "");
					info.put("concernsCount", "");
					info.put("friendsCount", "");
					info.put("fansCount", "");
				}
				jsonArray.add(info);
			}
			String teamFansData = "var data = " + jsonArray.toString();
			return teamFansData;
		} catch (Exception e) {
			log.error("班组粉丝归档", e);
			throw e;
		}
	}

	/**
	 * @Function teamFriendsData
	 * @Description 友好班组归档
	 * @param teamCode
	 *            班组编码
	 * @param filePath
	 *            班组头像存放路径
	 * @return
	 * @throws Exception
	 */
	private String teamFriendsData(String teamCode) throws Exception {
		try {
			PageBean pageBean = teamInfoService.selectFriendTeam(null, teamCode);
			List<TeamFriend> friendList = pageBean.getRecordList();
			JSONArray jsonArray = new JSONArray();
//			String teamIcon = this.downloadResource(authConfig.getTeamIcon(), filePath);
			for (int i = 0; i < friendList.size(); i++) {
				JSONObject info = new JSONObject();
				info.put("teamCode", StringTools.formatToString(friendList.get(i).getFriendTeamCode()));// 班组code
				if(StringTools.isEmpty(friendList.get(i).getTeamIcon())){
					info.put("teamIcon", authConfig.getTeamIcon());// 头像
				}else{
					info.put("teamIcon", StringTools.formatToString(friendList.get(i).getTeamIcon()));// 头像
				}
				info.put("name", StringTools.formatToString(friendList.get(i).getTeamName()));// 班组名称
				int honor = honorThirdService.getHonorCount(friendList.get(i).getFriendTeamCode(), AuthConstants.TENANT_CODE);
				info.put("honor", honor);// 班组荣誉数量
				Long createTime = friendList.get(i).getCreateTime();
				if (createTime != null) {
					info.put("createTime", DateUtils.getDateString(createTime, "yyyy年MM月dd日"));// 班组创建时间
				} else {
					info.put("createTime", "");
				}
				SysOrgInfo orgInfo = sysOrgService.selectByCode(friendList.get(i).getOrgCode());
				if (orgInfo != null) {
					info.put("orgName", StringTools.formatToString(orgInfo.getSysOrgFullname()));// 班组所属组织机构名称
				} else {
					info.put("orgName", "");
				}
				info.put("intro", StringTools.formatToString(friendList.get(i).getTeamIntro()));// 班组简介
				jsonArray.add(info);
			}
			String teamFriendsData = "var data = " + jsonArray.toString();
			return teamFriendsData;
		} catch (Exception e) {
			log.error("友好班组归档", e);
			throw e;
		}
	}

	/**
	 * @Function teamVisitorsData
	 * @Description 班组访客归档
	 * @param teamCode
	 * @param filePath
	 * @return
	 * @throws Exception
	 */
	private String teamVisitorsData(String teamCode) throws Exception {
		try {
			StatisticVisitDetail record = new StatisticVisitDetail();
			record.setTeamCode(teamCode);
			PageBean pageBean = statisticService.getVisit(null, record);// 调用访客接口
			JSONArray jsonArray = new JSONArray();
			List<StatisticVisitDetail> visitorList = pageBean.getRecordList();
			for (int i = 0; i < visitorList.size(); i++) {
				JSONObject info = new JSONObject();
				SysUserInfo userInfo = sysUserService.selectByCode(visitorList.get(i).getVisitCode());
				if(userInfo != null){
					if(StringTools.isEmpty(userInfo.getHeadPortrait())){
						info.put("head", authConfig.getUserHead());// 头像
					}else{
						info.put("head", StringTools.formatToString(userInfo.getHeadPortrait()));// 头像
					}
//					String userHead = StringTools.formatToString(userInfo.getHeadPortrait());
//					info.put("head", userHead);// 头像
					info.put("userName", StringTools.formatToString(userInfo.getUserName()));// 用户名
					info.put("userCode", StringTools.formatToString(userInfo.getUserCode()));// 用户code
					info.put("visitTime", DateUtils.getDateString(visitorList.get(i).getVisitTime(), "yyyy-MM-dd HH:mm"));// 访问时间
					jsonArray.add(info);
				}
			}
			String teamVisitorsData = "var data = " + jsonArray.toString();
			return teamVisitorsData;
		} catch (Exception e) {
			log.error("班组访客归档", e);
			throw e;
		}
	}

	/**
	 * @Function teamMessagesData
	 * @Description 班组留言归档
	 * @param teamCode
	 * @param filePath
	 * @return
	 * @throws Exception
	 */
	private String teamMessagesData(String teamCode) throws Exception {
		try {
			PageBean pageBean = teamInfoService.selectTeamMeassage(null, teamCode);
			List<TeamMessage> messageList = pageBean.getRecordList();
			JSONArray jsonArray = new JSONArray();
			for (int i = 0; i < messageList.size(); i++) {
				JSONObject info = new JSONObject();
				SysUserInfo userInfo = sysUserService.selectByCode(messageList.get(i).getUserCode());
				if (userInfo != null) {
					if(StringTools.isEmpty(userInfo.getHeadPortrait())){
						info.put("head", authConfig.getUserHead());// 回复人头像
					}else{
						info.put("head", StringTools.formatToString(userInfo.getHeadPortrait()));// 回复人头像
					}
//					info.put("head", StringTools.formatToString(userInfo.getHeadPortrait()));// 头像
					info.put("userName", StringTools.formatToString(userInfo.getUserName()));// 用户名
					SysOrgInfo orgInfo = sysOrgService.selectByCode(userInfo.getOrgCode());
					if (orgInfo != null) {
						info.put("orgName", StringTools.formatToString(orgInfo.getSysOrgFullname()));// 组织机构名称
					} else {
						info.put("orgName", "");
					}
					JSONArray replyArray = new JSONArray();
					List<TeamMessageReply> replyList = messageList.get(i).getTeamMessageReply();
					info.put("replyCount", replyList.size());// 回复总条数
					if (replyList.size() > 0) {// 循环留言
						for (int j = 0; j < replyList.size(); j++) {
							JSONObject reply = new JSONObject();
							reply.put("replyMessage", StringTools.formatToString(replyList.get(j).getReplyMessaage()));// 回复内容
							userInfo = sysUserService.selectByCode(replyList.get(j).getUserCode());
							if (userInfo != null) {
								if(StringTools.isEmpty(userInfo.getHeadPortrait())){
									reply.put("replyUserHead", authConfig.getUserHead());// 回复人头像
								}else{
									reply.put("replyUserHead", StringTools.formatToString(userInfo.getHeadPortrait()));// 回复人头像
								}
								reply.put("replyUserName", StringTools.formatToString(userInfo.getUserName()));// 回复人
								reply.put("replyOrgName",StringTools.formatToString(userInfo.getManageOrgInfo().getSysOrgFullname()));// 回复人组织
							} else {
								reply.put("replyUserHead", "");
								reply.put("replyUserName", "");
								reply.put("replyOrgName", "");// 回复人
							}
							userInfo = sysUserService.selectByCode(replyList.get(j).getReplyUserCode());
							if (userInfo != null) {
								reply.put("receUserName", StringTools.formatToString(userInfo.getUserName()));// 被回复人
								reply.put("receOrgName", StringTools.formatToString(userInfo.getManageOrgInfo().getSysOrgFullname()));// 被回复人组织
							} else {
								reply.put("receUserName", "");// 被回复人
								reply.put("receOrgName", "");// 被回复人组织
							}
							if(replyList.get(j).getCreateTime() != null){
								reply.put("replyTime", DateUtils.getDateString(replyList.get(j).getCreateTime(), "yyyy-MM-dd HH:mm"));// 回复时间
							}else{
								reply.put("replyTime", "");
							}
							replyArray.add(reply);
						}
					}
					info.put("replyList", replyArray);
					info.put("message", StringTools.formatToString(messageList.get(i).getContent()));
					Long createTime = messageList.get(i).getCreateTime();
					if (createTime != null) {
						info.put("createTime", DateUtils.getDateString(createTime, "yyyy-MM-dd HH:mm"));
					} else {
						info.put("createTime", "");
					}
				}
				jsonArray.add(info);
			}
			String teamMessagesData = "var data = " + jsonArray.toString();
			return teamMessagesData;
		} catch (Exception e) {
			log.error("班组留言归档", e);
			throw e;
		}
	}

	/**
	 * @Function memberDevoteData
	 * @Description 班组成员贡献归档
	 * @param teamCode
	 * @param filePath
	 * @return
	 * @throws Exception
	 */
	private String memberDevoteData(String teamCode) throws Exception {
		try {
			List<TeamMember> teamMembers = teamMemberService.selectByTeamCode(teamCode);
			List<String> userCodes = new ArrayList<String>();
			for (int i = 0; i < teamMembers.size(); i++) {
				userCodes.add(teamMembers.get(i).getUserCode());
			}
			if (userCodes.size() == 0) {
				return "";
			}
			RankEntity record = new RankEntity();
			record.setList(userCodes);
			PageBean pageBean = integralAccountService.selectPageByRank(null, record);
			JSONArray jsonArray = new JSONArray();
			List<IntegralAndCoin> recordList = pageBean.getRecordList();
			for (int i = 0; i < recordList.size(); i++) {
				JSONObject info = new JSONObject();
				info.put("rank", StringTools.formatToString(recordList.get(i).getRownum()));// 排名
				SysUserInfo userInfo = sysUserService.selectByCode(recordList.get(i).getAccountCode());
				if (userInfo != null) {
					info.put("userCode", StringTools.formatToString(userInfo.getUserCode()));
					if(StringTools.isEmpty(userInfo.getHeadPortrait())){
						info.put("head", authConfig.getUserHead());// 头像
					}else{
						info.put("head", StringTools.formatToString(userInfo.getHeadPortrait()));// 头像
					}
					info.put("userName", StringTools.formatToString(userInfo.getUserName()));// 用户名
					info.put("score", StringTools.formatToString(recordList.get(i).getIntegralBalance()));// 积分
					info.put("gold", StringTools.formatToString(recordList.get(i).getCoinBalance()));// 金币
				} else {
					info.put("userCode", "");
					info.put("head", "");
					info.put("userName", "");
					info.put("score", "");
					info.put("gold", "");
				}
				jsonArray.add(info);
			}
			String memberDevoteData = "var data = " + jsonArray.toString();
			return memberDevoteData;
		} catch (Exception e) {
			log.error("班组成员贡献归档", e);
			throw e;
		}
	}

	/**
	 * @Function upload
	 * @Description 上传zip
	 * @param zipPath
	 *            zip所在路径,/usr/local/test.zip
	 * @param request
	 * @param response
	 * @return
	 * @throws IllegalStateException
	 * @throws IOException
	 */
	private String upload(String zipPath, HttpServletRequest request, HttpServletResponse response)
			throws IllegalStateException, IOException {

		String resultStr = "";
		// 创建可关闭的httpClient
		CloseableHttpClient httpclient = HttpClients.createDefault();
		File targetFile = new File(zipPath);
		try {

			// 创建post传输方法
			HttpPost post = new HttpPost(fastDfsConf.getFastUrl());//
			// BaseConstants.FASTDFS_FILE_DOWNLOAD_URL
//			HttpPost post = new HttpPost("http://172.16.126.20:8080/zssq-fastdfs-web/file/upload/");

			// 创建浏览器传输模式
			MultipartEntityBuilder builder = MultipartEntityBuilder.create()
					.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
			// 设置模式编码
			builder.setCharset(CharsetUtils.get("UTF-8"));

			// 把文件放到流对象FileBody中
			FileBody fileBody = new FileBody(targetFile);
			// 将文件信息放到模式中
			builder.addPart("multipartFile" + System.currentTimeMillis(), fileBody);

			HttpEntity reqEntity = builder.build();
			post.setEntity(reqEntity);
			// 发送请求，并获取响应
			CloseableHttpResponse res = httpclient.execute(post);
			try {
				if (org.apache.http.HttpStatus.SC_OK == res.getStatusLine().getStatusCode()) {
					HttpEntity entitys = res.getEntity();
					if (null != entitys) {
						resultStr += EntityUtils.toString(entitys, Charset.forName("UTF-8"));
					}
					EntityUtils.consume(entitys);
				}
			} finally {
				// 关闭响应
				res.close();
			}
		} finally {
			// 关闭http连接
			httpclient.close();
			if (null != targetFile) {
				targetFile.delete();
			}
		}
		return resultStr;
	}

	/**
	 * @Function urlAnalysis
	 * @Description 解析json得到url
	 * @param jsonUrl
	 * @return
	 * @throws BusinessException
	 */
	private String urlAnalysis(String jsonUrl) throws BusinessException {
		JSONObject jsonObject = JSONObject.parseObject(jsonUrl);
		Object object = jsonObject.get("body");
		JSONObject body = JSONObject.parseObject(object.toString());

		Object url = body.get("url");
		return url.toString();
	}

	/**
	 * @Function downloadResource
	 * @Description 下载静态资源
	 * @param url
	 *            静态资源url,如group1/M00/00/00/rBB9c1lV5KeAHygkAACJ2kkwOF4545.jpg
	 * @param path
	 *            资源存放目录,如/usr/local/common/
	 * @throws Exception
	 */
//	private String downloadResource(String uri, String path) throws Exception {
//		OutputStream os = null;
//		InputStream is = null;
//		try {
//			String teamIconName = "";
//			if (StringTools.isEmpty(uri)) {
//				return teamIconName;
//			}
//			List<String> headUri = Arrays.asList(uri.split("/"));
//			// 查找文件是否已经下载
//			teamIconName = headUri.get(headUri.size() - 1);
//			File file = new File(path + teamIconName);
//			if (!file.exists()) {
//				file.createNewFile();
//			}
//			// 下载
//			String downloadUrl = fastDfsConf.getDownloadUrl();
//			URL url = new java.net.URL(downloadUrl + uri);
//			URLConnection conn = url.openConnection();
//			if(conn.getContentType().equals("text/html")){//内容为文本,放弃下载
//				return "";
//			}
//			is = conn.getInputStream();
//			os = new FileOutputStream(file);
//			int bytesRead = 0;
//			byte[] buffer = new byte[8192];
//			while ((bytesRead = is.read(buffer, 0, 8192)) != -1) {
//				os.write(buffer, 0, bytesRead);
//			}
//			os.close();
//			is.close();
//			return teamIconName;
//		} catch (Exception e) {
//			log.error("下载静态资源异常", e);
//			throw e;
//		} finally {
//			if (os != null) {
//				try {
//					os.close();
//				} catch (IOException e) {
//					e.printStackTrace();
//				}
//			}
//			if (is != null) {
//				try {
//					is.close();
//				} catch (IOException e) {
//					e.printStackTrace();
//				}
//			}
//		}
//	}

	

	public static void main(String[] args) throws Exception {
//		String indexFile = "/opt/archive/team/template/";
		String archivesFile = "D:\\opt\\archive\\team\\archiveFile\\";
		String teamFile = archivesFile + "BZ1700171\\";//指定文件夹  班组编码
		ZipUtil.zip(teamFile ,archivesFile , "BZ1700171.zip");
	}

}

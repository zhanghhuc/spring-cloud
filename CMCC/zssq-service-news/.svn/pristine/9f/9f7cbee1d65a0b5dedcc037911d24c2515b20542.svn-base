package com.zssq.service.impl;

import com.zssq.biz.*;
import com.zssq.constants.NewsConstants;
import com.zssq.exceptions.BusinessException;
import com.zssq.news.dao.pojo.NewsArchive;
import com.zssq.news.dao.pojo.NewsInfoContent;
import com.zssq.news.model.*;
import com.zssq.news.service.NewsArchiveService;
import com.zssq.utils.PageBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

import static com.sun.tools.javac.jvm.ByteCodes.ret;

@Service
public class NewsArchiveServiceImpl implements NewsArchiveService {

    @Autowired
    private NewsArchiveBiz newsArchiveBiz;

    @Autowired
    private NewsInfoContentBiz newsInfoContentBiz;
    @Autowired
    private NewsCommentBiz newsCommentBiz;
    @Autowired
    private NewsInfoHistoryBiz newsInfoHistoryBiz;

    @Override
    public PageBean getNewsArchives(NewsArchiveQuery newsArchiveQuery) throws BusinessException {
        newsArchiveQuery.setOrderByClause("modify_time desc");
        PageBean pageBean = new PageBean() ;
        int count = newsArchiveBiz.selectCount(newsArchiveQuery) ;
        List<NewsArchive> list = newsArchiveBiz.selectList(newsArchiveQuery) ;
        pageBean.setTotalCount(count);
        pageBean.setRecordList(list);
        return pageBean;
    }

    @Override
    public int addNewsArchives(NewsArchiveModel newsArchiveModel) throws BusinessException {
        newsArchiveBiz.addNewsArchive(newsArchiveModel)  ;
        List<String> newsCodeList = generateNewsCodes(newsArchiveModel.getNewsCodes());
        newsInfoContentBiz.updateArchiveNews(newsCodeList) ;
        for(String newsCode : newsCodeList){
            NewsModel newsModel = generateNewsModel(newsCode,newsArchiveModel) ;
            newsInfoHistoryBiz.addNewsHistory(newsModel) ;
        }
        return newsCodeList.size() ;
    }

    private NewsModel generateNewsModel(String newsCode, NewsArchiveModel newsArchiveModel) {
        NewsModel newsModel = new NewsModel() ;
        newsModel.setNewsCode(newsCode);
        newsModel.setUserCode(newsArchiveModel.getCreatorCode());
        newsModel.setInfoOperatorOrg(newsArchiveModel.getOrgCode());
        newsModel.setInfoStatus(NewsConstants.NEWS_STATUS_ARCHIVED);
        newsModel.setTenantCode(newsArchiveModel.getTenantCode());
        return newsModel ;
    }

    @Override
    public  List<NewsInfoContent> generateNewsData(String newsCodes) {
        //查询所有的新闻
        List<NewsInfoContent> newsInfoContents = getNewsList(newsCodes) ;
        //循环新闻，查询新闻下所有评论和回复
        for(NewsInfoContent newsInfoContent : newsInfoContents){
            List<NewsCommentModel> commentModels = getComments(newsInfoContent.getNewsCode()) ;
            newsInfoContent.setNewsCommentModels(commentModels);
        }
        return newsInfoContents;
    }

    private List<NewsInfoContent> getNewsList(String newsCodes){
        List<String> newsCodeList = generateNewsCodes(newsCodes);
        return newsInfoContentBiz.selectByArchivedCodes(newsCodeList) ;
    }

    private List<String> generateNewsCodes(String newsCodes) {
        List<String> newsCodeList = new ArrayList<>() ;
        String[] array = newsCodes.split(",");
        for(int index = 0 ;index<array.length;index++ ){
            newsCodeList.add(array[index]) ;
        }
        return newsCodeList ;
    }

    private List<NewsCommentModel> getComments(String newsCode ){
        NewsCommentQuery newsCommentQuery = new NewsCommentQuery() ;
        newsCommentQuery.setNewsCode(newsCode);
        newsCommentQuery.setIsDelete(NewsConstants.NEWS_NO_DELETE);
        newsCommentQuery.setIsShield(NewsConstants.NEWS_NO_SHIELD);
        newsCommentQuery.setOrderByClause("create_time desc");
        return newsCommentBiz.selectCommentsAndReply(newsCommentQuery) ;
    }


}

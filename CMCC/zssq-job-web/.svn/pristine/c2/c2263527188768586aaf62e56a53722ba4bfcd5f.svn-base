package com.zssq.job.task;

import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.dangdang.ddframe.job.api.AbstractOneOffElasticJob;
import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
import com.zssq.constants.ElasticJobConstants;
import com.zssq.service.ISSOService;
import com.zssq.utils.PropertiesUtil;

import redis.clients.jedis.Jedis;

@Component
public class SSOServerTaskJob extends AbstractOneOffElasticJob {
	
	private Properties propsRedis = new PropertiesUtil("ssoRedis.properties");
	
	private Logger log = Logger.getLogger(this.getClass());
	
	@Autowired
	private ISSOService ssoService;

	@Override
	protected void process(JobExecutionMultipleShardingContext context) {
		try {
			//获取分片参数
	    	Map<Integer,String> items = context.getShardingItemParameters();
	    	
	    	if(ElasticJobConstants.A.equals(items.get(0))){ //使用0分片处理数据
	    		System.out.println("开启定时任务" + new Date());
	        	Jedis redis = new Jedis(propsRedis.getProperty("ssoRedisIP"), Integer.valueOf(propsRedis.getProperty("ssoRedisPort")));  //sso的redis
	        	redis.auth(propsRedis.getProperty("ssoRedisPwd"));
	        	log.info("SSOServerTaskJob.process:Server is running:" + redis.ping());
	        	
	        	Set<String> set = redis.keys("*");
	//    		System.out.println("获取目前redis中都有哪些key");
	    		Iterator it = set.iterator();
	    		while(it.hasNext()){ //循环删除所有key
	    			String key = (String) it.next(); //票据
	    			log.info("SSOServerTaskJob.process:sso端redis中的key:" + key);
	//    			redis.del(key);
	    			
	    			if(key.length() > 50){
	    				String value = redis.get(key);
	    				log.info("SSOServerTaskJob.process:sso端redis中的key:" + key);
	    				log.info("SSOServerTaskJob.process:sso端redis中的value:" + value);
	    				String[] values = value.split("-");
	    				
	    				log.info("SSOServerTaskJob.process:values.length:" + values.length);
	    				
	    				String uid = values[0];
	    				String app = values[1];
	    				if(values.length > 2 && app != null){
	    					String uidPassword = values[2];
	    					
	    					log.info("SSOServerTaskJob.process:sso端redis中的values[0]-uid" + uid);
	    					log.info("SSOServerTaskJob.process:sso端redis中的values[1]-app" + app);
	    					log.info("SSOServerTaskJob.process:sso端redis中的values[2]-uidPassword" + uidPassword);
	    					
	    					ssoService.updateCertification(uid,app, uidPassword,key);
	    				}
	    			}
	    		}
	    	}
		} catch (Exception e) {
			log.error("SSOServerTaskJob.process:",e);
		}
	} 
} 
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!-- namespace命名空间，作用就是对sql进行分类化管理，即sql隔离
注意：使用mapper代理方法开发的话，namespace就有特殊重要的作用了,namespace=mapper接口地址
 -->
<mapper namespace="mybatis.mapper.UserMapper">

	<!-- 开启本mapper的namespace下的二级缓存 -->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache" />

	<sql id="query_user_where">
		<if test="user!=null">
			<if test="user.sex!=null and user.sex!=''">
				and user.sex = #{user.sex}
			</if>
			<if test="user.username!=null and user.username!=''">
				and user.username like '%${user.username}%'
			</if>
		</if>
		<if test="ids!=null">
			<foreach collection="ids" item="user_id" open="AND (" close=")" separator="OR">
				id=#{user_id}
			</foreach>
			<!-- 
			<foreach collection="ids" item="user_id" open="AND id IN(" close=")" separator=",">
				#{user_id}
			</foreach>
			 -->
		</if>
	</sql>

	<!-- 定义resultMap
	将SELECT id id_,username username_ FROM USER 和User类中的属性做一个映射关系
	type: resultMap最终映射的java对象类型，这里用的是别名，如果没有定义别名，需要使用完全限定名
	id：对resultMap的唯一标识
	 -->
	<resultMap type="user" id="userResultMap">
		<!-- id表示查询结果集中唯一标识
		column：查询出来的列名
		property：type指定的pojo类型中的属性名
		最终resultMap对column和property做一个映射关系（对应关系）
		 -->
		<id column="id_" property="id"/>
		<!-- result表示查询结果集中普通名映射的定义
		column：查询出来的列名
		property：type指定的pojo类型中的属性名
		 -->
		<result column="username_" property="username"/>
	</resultMap>
	
	<select id="findUserById" parameterType="int" resultType="user">
		select * from user where id = #{id}
	</select>
	
	<select id="findUserByName" parameterType="java.lang.String" resultType="mybatis.po.User">
		select * from user where username like '%${value}%'
	</select>
	
	<select id="findUserList" parameterType="mybatis.po.UserQueryVo" resultType="mybatis.po.User">
		select * from user
		<!-- where可以自动去掉条件中的第一个and -->
		<where>
			<!-- 引用sql片段的id，如果refid指定的id不在本mapper文件中，需要在前面加上namespace -->
			<include refid="query_user_where"></include>
			<!-- 还可以引用其他sql片段 -->
		</where>
	</select>
	
	<select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
		SELECT id id_,username username_ from user where id = #{id}
	</select>

	<insert id="insertUser" parameterType="mybatis.po.User">
		insert into user(username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})

		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select last_insert_id()
		</selectKey>
		
	</insert> 

	<delete id="deleteUser" parameterType="int">
		delete from user where id=#{id}
	</delete>

	<update id="updateUser" parameterType="mybatis.po.User">
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
	</update>
</mapper>
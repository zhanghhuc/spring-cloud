<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!-- namespace命名空间，作用就是对sql进行分类化管理，即sql隔离
注意：使用mapper代理方法开发的话，namespace就有特殊重要的作用了
 -->
<mapper namespace="test">
	
	<!-- 在映射文件中配置很多sql语句 -->
	<!-- 需求：通过id查询用户 -->
	<!-- 通过select执行数据库查询
		id：标识映射文件中的sql，将sql语句封装到mappedStatement对象中，称为statement的id
		#{}标识一个占位符，用来接收输入参数的
		parameterType：指定输入参数的类型，这个要和数据库中的保持一致
		#{id}：其中的id标识接收输入的参数，参数名称就是id，如果输入参数是简单类型，那么#{}中的参数名
			可以任意，可以value或者其他名称
		resultType：指定输出结果的类型，即查询结果所映射的java对象
	 -->
	<select id="findUserById" parameterType="int" resultType="mybatis.po.User">
		select * from user where id = #{id}
	</select>
	
	<!-- 根据用户名称模糊查询用户信息，可能返回多条 
	resultType：指定的就是单条记录所映射的java对象类型
	${}：表示拼接sql串，将接收到的参数的内容不加任何的修饰拼接在sql中,${}中只能使用value
	但是使用${}来拼接sql，可能会引起sql注入，所以不建议使用这种方法
	-->
	<select id="findUserByName" parameterType="java.lang.String" resultType="mybatis.po.User">
		select * from user where username like '%${value}%'
	</select>
	
	<!-- 添加用户 -->
	<!-- parameterType是一个pojo（包括用户信息
		#{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
	 -->
	<insert id="insertUser" parameterType="mybatis.po.User">
		insert into user(username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})
		<!-- 将插入数据的主键返回，返回到user对象中
			select last_insert_id()：得到刚刚insert进去记录的主键值，只适用于自增主键
			keyProperty：表示将查询到主键值设置到parameterType指定的对象的哪个属性
			order:表示select last_insert_id()的执行顺序，相对于insert语句来说，它的执行顺序
			resultType:表示select last_insert_id()的结果类型
		 -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select last_insert_id()
		</selectKey>
		
		<!-- 
		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
			select uuid()
		</selectKey>
		 -->
	</insert>
	
	<!-- 删除用户 -->
	<!-- 根据id删除用户，需要输入id值 -->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete>
	
	<!-- 更新用户 -->
	<!-- 
		需要传入用户的id
		需要传入用户的更新信息
		parameterType指定user对象，包括id和更新信息，注意：id必须存在
		#{id}：从输入user对象中获取id属性值
	 -->
	<update id="updateUser" parameterType="mybatis.po.User">
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
	</update>
</mapper>